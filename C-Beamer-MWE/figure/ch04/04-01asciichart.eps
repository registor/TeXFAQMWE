%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: asciichart.pdf
%%Creator: Adobe Acrobat 11.0.12
%%For: virtualbox
%%CreationDate: 2015/10/16, 9:54:25
%%BoundingBox: -1 0 441 582
%%HiResBoundingBox: 0 0 440.9178 581.0721
%%CropBox: 0 0 440.9178 581.0721
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1071 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c005 78.147326, 2012/08/23-13:03:03        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2015-10-16T09:51:50+08:00"
   xmp:CreateDate="2015-10-16T09:40:41+08:00"
   xmp:MetadataDate="2015-10-16T09:51:50+08:00"
   xmp:CreatorTool="XeLaTeX + xeCJK + CTeX"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:62f0e28f-2f4f-45ff-8c52-0873190490bf"
   xmpMM:InstanceID="uuid:808be28a-2f8a-4bc7-af68-fd36cdbc32b8"
   pdf:Producer="XeTeX 0.99992">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">C语言程序设计</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>耿楠，张志毅</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -581.072 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-7.62939e-6 0 mo
-7.62939e-6 581.072 li
440.918 581.072 li
440.918 0 li
cp
clp
.797 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
.15369 -23.074 mo
453.704 -23.074 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
%ADOBeginSubsetFont: NQPBAA+CMUSerif-Roman-Identity-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (NQPBAA+CMUSerif-Roman-Identity-H)
%%Title: (NQPBAA+CMUSerif-Roman-Identity-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /NQPBAA+CMUSerif-Roman-Identity-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-1135 -387 1495 1094} def
/FontInfo 5 dict dup begin
/Notice (Converted by Andrey V. Panov from TeX fonts. Some glyphs are copied from Blue Sky fonts released by AMS.) def
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 120 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 13 dict dup begin
/BlueValues [-22 -0 430 447 664 666 678 716] def
/OtherBlues [-206 -195 -162 -162] def
/BlueScale 0.0260526 def
/StdHW [31] def
/StdVW [70] def
/StemSnapH [0 22 26 31] def
/StemSnapV [25 28 30 40 70 75 84 89 103] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 4 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
119 <001C60D8A8C9B854D0F462031C56143B404F2BD66EC15ECAD52FB5D4055
1DBFE1BF578FBE55EFA2F7EFA> |
18 <001C60D8A8C9B7A73DC579B9CE13A4EA8C148F4BC66BEA337C4DE2EEF1C4
CAFA9F120106C1AB5EEC685376481EF4250D4D18FDB14A6D6397D1B8CF963A89
73E85BEB3FA0A37FB3BC94FA6271F237CE05F5A49A4ECEE1EA> |
25 <001C60D8A8C9B7A73D3B2B97FFCAD0162BC4CE7F82EBF0DF6BD9B813C3BC
E1C5B2BD06F83444A9F7E667A6CFA433FA679669F4AD9B0C6097D84E45A8B810
5B5D6D6C72501A9E70E9364A9A15C7E7B4B6DD724912699D52EBD8B7AF332C44
014CFB2730BB363222CE54357E1029AC78434BF0195BD1BAC5EAA3A714673D31
2C3F50A28A7975586E2836F6230FE738F989005FC6E2CECC1E9B3086FBF18165
1A8904EAF35DB9128E9F2B0E9E0922FFB4298D69169F28E9ECB4783938A59606
6200E44CF32B523AE30C5B0519C1> |
0 <001C60D8A8C9B6ED05B71B281B14BACC0E0F6998C26A83E375A07AB156E33
D3C0D0AE7841ED3C58AA89F8452D8B14DFBBDB595110D4073E8E9BBB4C7CAABD
777414D8BA1B96490CC4DB8D55EDD27856AB7DC35AC4EEB66EA52ACF8B5> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /NQPBAA+CMUSerif-Roman-Identity-H-Identity-H /Identity-H 0 [/NQPBAA+CMUSerif-Roman-Identity-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/BKUCWC+CMUSerif-Roman-Identity-H /NQPBAA+CMUSerif-Roman-Identity-H-Identity-H findfont ct_VMDictPut
BKUCWC+CMUSerif-Roman-Identity-H [8.996 0 0 -8.996 0 0 ]msf
.15369 -28.344 mo
(\000w)sh
7.15269 -28.344 mo
(\000\022\000\031\000w)
[4.498 8.996 0 ]xsh
%ADOBeginSubsetFont: BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H)
%%Title: (BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-55 -250 1051 895} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 6619 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
4740 <001C60D8A8C9B5EE315C3BE3B9552F1708EB5FDA82E7DF066BD9EB6419
11EDB9010C6524504AB3A19D9945FD733AB65D4D03A575FBD91219215F19FCE2
6C6C209EF4B23CAD500AF4B5E4ED6F42080A4B0F4E6BB519D0AB48F728D949C6
3DB4283028485E11B2CC3CF144E920D69FF04228E89B93D6B8FFA4D9385C6923
2B8916EAE224818E0943255866F5D03E7CC265379F5FCAA2DDD8AA2521A4CEA7
49F1E8ED38ABD4EF8B50C60FB85056D7FA7FC08C64E6D5055F49B58C654AEAC3
1B4D317D12A07A46B7F2115702609D8FF40F428D47EDAA835C8E30D24C5C5909
7B5ECC023E02D0DED2DF6ED205EE2221B90EDDD78307DA88ACDE98848D4A1D68
0C0EDE064F3C428726EA7FED313B682C34CEB525879362793C9D1FD2B062E947
94260C55F838F1D3B38B05C72CF95C12D6C012891836AC0C7E1F731C7F30E1> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H /Identity-H 0 [/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H findfont [8.996 0 0 -8.996 0 0 ]msf
336.734 -28.344 mo
(\022\204)sh
/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H findfont [8.996 0 0 -8.996 0 0 ]msf
336.734 -28.344 mo
(\022\204) false chp
.361 lw
@
%ADOBeginSubsetFont: BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H 1 GetGlyphDirectory
772 <001C60D8A8C9B5EE314CCA1BFEC1C1DAE152614DE0EEBD413E0198E9075
A3D8439D4> |
!
end
end end
%ADOEndSubsetFont
/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H findfont [8.996 0 0 -8.996 0 0 ]msf
345.73 -28.344 mo
(\003\004)sh
/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H findfont [8.996 0 0 -8.996 0 0 ]msf
345.73 -28.344 mo
(\003\004) false chp
@
%ADOBeginSubsetFont: BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H 1 GetGlyphDirectory
4710 <001C60D8A8C9B5EE3148305F238D9FE9ABB1167D2F3163658455E3A348
BD1880D115195642E88ED03A3B8773FBF817369A9B38970458E6F19E55D7F5D1
6113EFB4C976B4CEBE4FD8D2BB36959EDBCD823BDD30D2B1CD7E08367C366906
5C73E8F3297C67370857458F997D4FCB835197EB475D45957F6D96E9946EF4EB
97C16743B93CC85B6F2668C2C134A1BE44F023957F503722AE9ECF1138F87433
9B3C7D65BDE78D73D07D813D7B104B03EDDD3FD3516C8AE7D82EEA213D8F6649
4EB6AC9B03FDE6833D4BBCDFFD2A13> |
!
end
end end
%ADOEndSubsetFont
/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H findfont [8.996 0 0 -8.996 0 0 ]msf
354.726 -28.344 mo
(\022f)sh
/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H findfont [8.996 0 0 -8.996 0 0 ]msf
354.726 -28.344 mo
(\022f) false chp
@
%ADOBeginSubsetFont: BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H 1 GetGlyphDirectory
2973 <001C60D8A8C9B5EE3102BD3C2FE03C8AC9613F2870BF68EDC5E1CDC450
DDE96CF5797BE29C609DC9C5BD657FA104E48FA09BA10796F69CA7DDE91F5A8B
E26CFB62B12B39799631FEC5B1F7EF6F5BB118B6EBE4775D0A8FFBCEEC324A61
98C2B87C501EF372319BBA2497365B2B672547C0520FB0C71900B0595C39B97F
109E3F24278B786764F637726A4AF0F552DD2EECFF5396BC01CBC6477510E14E
B11B5F493DEB472E0C4CA011D0A687B5C383FB96311890425E356558944BB695
476A484626E3ADBF54386207491321405C0F83CB756F6ADB700473C393BB6A50
4B0711AC787CD726E9E32DF4BAEE02D201E8EB45850D8F7B6C88B496C38A93ED
72FA45BD8F666F85D2B8387F9C76995064C100B98164ECA3D61AFE74A12A3D4A
70903A91A78BA97C844C56D6A18C6A783FCCD7E35BE4E8DF4932E7A01D71FEDE
32BFB414379F62911CF49D969F927806215C75A4567964B367C21299C709CE50
88758E5363FDB1AE61F36A323136A02BD052E97A324DED1C5B994C0703BFD194
EA857BA9C94CF4344F5A4CC2A8C15EF7F3232C1EEE17E644E25AFE650A7AD8DE
809F795067FB2C9495DD16B0A1C6D27CD795B11459F9FF93CF38DD8AD27C5A2B
6001F91269DB334B2A8632C2> |
!
end
end end
%ADOEndSubsetFont
/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H findfont [8.996 0 0 -8.996 0 0 ]msf
372.709 -28.344 mo
(\013\235)sh
/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H findfont [8.996 0 0 -8.996 0 0 ]msf
372.709 -28.344 mo
(\013\235) false chp
@
%ADOBeginSubsetFont: BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H 1 GetGlyphDirectory
2806 <001C60D8A8C9B5EE3103E2CCDBD3BA21220E1D3276B65B915DBB5CB178
B77FB25185012F8AA597109DF3651F150C349AC426ECBF4576BC1E4199AD1A64
1A93963D6308BEFD21F1B858CC4E54080CDAF72776163FDA8EB68268B3FCC6D7
F1EB0932957A1B3F023482B455E5BD8558FBB257CE1C7F1E5AE7B3759B2A5C55
AAF1B1B407C9B5D6244E6A325927DE2021F9B38C9C414C7A01A0847FD4F2174F
837BF2712B284734017E9627D857344519977E0972EDA6815BA8C10BCB52CAD5
46E3637A14E31ABA5C6665A2CB40C2315B1524DC750F21BC55986088DE449D7E
D4B0A19FA921F65842AEDF021E815411EC4898B4F483F164811CAD96B380> |
!
end
end end
%ADOEndSubsetFont
/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H findfont [8.996 0 0 -8.996 0 0 ]msf
386.203 -28.344 mo
(\012\366)sh
/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H findfont [8.996 0 0 -8.996 0 0 ]msf
386.203 -28.344 mo
(\012\366) false chp
@
%ADOBeginSubsetFont: BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H 1 GetGlyphDirectory
4829 <001C60D8A8C9B5EE313715D30686A56B258CA61ACEA0B4C0E977D1DA74
57772CF7E1BFA27315C6FAD28E51E4B2166F12D3A4115513D3F3B00E0588C8B4
BCABD8FFEE627B38D5F8F29DE58A92AC1CAE66781E930E7B44C1A339F48C1356
AB87286D76283140793C1759FD9A1279CF7FCD67F9CE59030F9527F706344DE9
3344C79A21E79D24495047EA898E57CCA793362BC9196E3D842EB4D667271B72
D01D96873D062E66DF0921F2D8C91146E56E4E57C1E7550CEBCC7AE4733A4D66
D1AF5460A86FF608546C771B74EB059892D2B32B13217A40097B31EF08E0FC21
824DB33FE399E438C637948DF4D61B041F24765D60425867A7C6E9DC896C07A0
0A072961> |
!
end
end end
%ADOEndSubsetFont
/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H findfont [8.996 0 0 -8.996 0 0 ]msf
399.697 -28.344 mo
(\022\335)sh
/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H findfont [8.996 0 0 -8.996 0 0 ]msf
399.697 -28.344 mo
(\022\335) false chp
@
%ADOBeginSubsetFont: BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H 1 GetGlyphDirectory
1740 <001C60D8A8C9B5EE31233478B25EEB888E8A2A136B6AD8FB45E91A26D4
E875EC672045695C5A6BD3BF292905255529E85BA4081334223321F50B8B7F6C
32028511C34C82B0DA19D7D6B03CC3A7A9E6E858C11AE4706BF7F40A7D59CDA2
040A06EB6BD48668AF6260477C437F01EFA9AD0F81FDFA469FA9E127F13DFAC2
FCA8DEE38D8BF02A873EA128A7B77527D8FDB046241A1F207EFB9FF415B0792D
F8A13086E8C8EE8D0F8E4148D60245A8B3E4A71CD36D630F09AA4B32D4DFEE1B
AFFC0F1179D8682D6BA7813BA7262102E64F493961AF8EF21CFB852226583943
DCE16B416508FFF90CB0> |
!
end
end end
%ADOEndSubsetFont
/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H findfont [8.996 0 0 -8.996 0 0 ]msf
413.191 -28.344 mo
(\006\314)sh
/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H findfont [8.996 0 0 -8.996 0 0 ]msf
413.191 -28.344 mo
(\006\314) false chp
@
%ADOBeginSubsetFont: FXYAAA+MarVoSym Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /FXYAAA+MarVoSym def
/FontInfo 7 dict dup begin
/Notice (Martin Vogel's Symbols, including this derivative with TeX support, are released under the Open Font License - see http://ctan.org/pkg/marvosym) def
/Weight (Regular) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 185 /ForwardToIndex put
def
/FontBBox {-572 -214 3014 925} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-12 2 713 728 621 635 641 660 516 534] def
/OtherBlues [-159 -138 -37 -15] def
/StdHW [24] def
/StdVW [16] def
/StemSnapH [4 14 24 34 44 54 67 83 93 106 133 208] def
/StemSnapV [6 16 26 36 46 56 66 77 87 97 107 133] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/ForwardToIndex <1C60D8A8C9B08A9519E37FA7C164EA6CA4F50AA7B4E154E
91629F050D62D2B1940693B52CCE82F293163A253745F5D2C039771A455E2658
7169C78C9E9D50D02755DA0283085D87C17A095AD10F832934E6F519CDD23CD8
BA9E0AAF7F425482E9CC0D2690AD32A340E6F91B1E37A5E22F610CA9ABD9EA11
D0ABFC27870DCCEBE38565588B75040F72B1442CA555F82EB25A63ABFCB0FC77
BC077ABA11DC89F790D6278C9EDAEF1C0> |-
/.notdef <1C60D8A8C9B677EC34> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BKUCWE+MarVoSym /FXYAAA+MarVoSym findfont ct_VMDictPut
/BKUCWE+MarVoSym*1 
[185{/.notdef}rp /ForwardToIndex 70{/.notdef}rp]
BKUCWE+MarVoSym nf
BKUCWE+MarVoSym*1 [8.996 0 0 -8.996 0 0 ]msf
441.684 -28.344 mo
(\271)sh
.398 lw
.15369 .205994 mo
440.944 .205994 li
@
%ADOBeginSubsetFont: DTOAAA+CMR7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /DTOAAA+CMR7 def
/FontInfo 7 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMR7.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 98 /b put
def
/FontBBox {-27 -250 1122 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 -0 431 446 664 674 683 703] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [36] def
/StdVW [79] def
/StemSnapH [28 36] def
/StemSnapV [79 95] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/five <1C60D8A8C9B7E2CEA7BEEF97397CF584C73BBB552ACA7BE761A773032
0D948261D0F09FB4B597AA91855F03701772D3C759AF316165C9BC05703D2F33
CBF3B6D037C80DA58D3E06EB530844281561DE1EAAA05EA7E6E603AE2E808199
D7F7D17F7975F2430BB148C6FCD665E0CC9AEDBF490CAF289909154436D62B38
5B99A24005E5B4B073467835D03C36A9E0434AEAB81CF17668A704C2ABC5CC1B
01E0E48ABB31D966C239418DF38462842A0F3655061F35189B65BEAD3E2DBB0B
10790> |-
/six <1C60D8A8C9B7E2CEA7BEEF982C161B6F1844D3D991CD85BAA17D6BCF4C
629F19CD61ECE57E6A96F375F46BE0F3FD67310743F406B1D8CA08397FA37209
4A02912C5D597F4D7150AD2D5AD23F78723FAF1D1322EBC1CBD4D38A8E675CD4
4F1CCE2571A7F52532CE9F32BAF1F3398E9131635A4C36CD5C145A25946DC0F7
6592EA443B75A100659041A930F02049DE328C90A016451FD00FAE8A2766EFC3
74D01BA42580D01CBA279765DDA2> |-
/seven <1C60D8A8C9B7E2CEA7B5AC14D2739E53E381628B2C3297CDF1282D21
BC38288187A5A2115AAF3D220A5F1AC7BF6E2698F64B73E3A5AEC8D69C367F8E
33E0F115A00D9ADE41757E443451F347436BC460F5C13BC2BB95EF4D499823DD
2BE671C1F7FA8787897B1AA2016412BC2C70F96D3F7BFEE1> |-
/b <1C60D8A8C9B66B3926DDF1406D75DA3363105A21B19857B98743E13153D1
A54971E0B100B47860C984D7D9FBB0B22EC804BAB4E5BA1A1D01D3340279FD06
451DA95F0FCCFDFFFB15D75468AFFAE24B85C98AC16DFD22AD1603281F83F91D
C14A419AE1CF2B438100CC0339931370F0CC382DD9C4A8960D7FEA92A80DAA7F
5484> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BKUCWF+CMR7 /DTOAAA+CMR7 findfont ct_VMDictPut
/BKUCWF+CMR7*1 
[53{/.notdef}rp /five /six /seven 42{/.notdef}rp /b 157{/.notdef}rp]
BKUCWF+CMR7 nf
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
22.4437 7.23602 mo
(b7)
[4.40057 0 ]xsh
38.9437 23.626 mo
(b6)
[4.40057 0 ]xsh
55.4437 40.006 mo
(b5)
[4.40057 0 ]xsh
1.417 lw
68.8937 42.926 mo
68.8937 .406006 li
@
%ADOBeginSubsetFont: DTOAAA+CMR7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWF+CMR7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7E2CEA7B240FEF602C0A65C384F7D9F85D89DA8B00ED99
C515D758A8E52DC86F382FB688F61317580A66E24517AC4B674C7F287697FD9E
B76D1A8A475F5845B03AF89A501A6DB631BF28FBA18A499E479A1BFC174F26C9
55CA64A7BFA811EED6669B69DDEBB8700FD4E8343040166E083D8F9355C627C9
603D5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWF+CMR7 /Encoding get
dup 48 /zero put
pop
%ADOEndSubsetFont
/BKUCWF+CMR7*1 
[48{/.notdef}rp /zero 4{/.notdef}rp /five /six /seven 42{/.notdef}rp /b 
157{/.notdef}rp]
BKUCWF+CMR7 nf
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
71.5937 6.896 mo
(0)sh
90.2937 23.416 mo
(0)sh
108.994 39.936 mo
(0)sh
.709 lw
115.314 42.926 mo
115.314 .406006 li
@
%ADOBeginSubsetFont: DTOAAA+CMR7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWF+CMR7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7E2CE5B62E9FEEC2E64DB4DF57A0DEE8F2DC4BC1D285E2D
6E93583C8BA769F966BA0D2874BA4F6692804A12EE154BF6C4128EE336963B1B
369FC937E51FD440B01114006718C9CD9EDADE925291DDB3291CFBE83284B576
2DA660F3B8EE1736383DFDEEBA0BD582FD6608113CEA73> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWF+CMR7 /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/BKUCWF+CMR7*1 
[48{/.notdef}rp /zero /one 3{/.notdef}rp /five /six /seven 42{/.notdef}rp 
/b 157{/.notdef}rp]
BKUCWF+CMR7 nf
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
117.664 6.896 mo
(0)sh
136.364 23.416 mo
(0)sh
155.064 39.936 mo
(1)sh
1.417 lw
161.734 42.926 mo
161.734 .406006 li
@
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
164.434 6.896 mo
(0)sh
183.134 23.416 mo
(1)sh
201.834 39.936 mo
(0)sh
.709 lw
208.154 42.926 mo
208.154 .406006 li
@
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
210.494 6.896 mo
(0)sh
229.194 23.416 mo
(1)sh
247.894 39.936 mo
(1)sh
1.417 lw
254.564 42.926 mo
254.564 .406006 li
@
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
257.264 6.896 mo
(1)sh
275.964 23.416 mo
(0)sh
294.664 39.936 mo
(0)sh
.709 lw
300.984 42.926 mo
300.984 .406006 li
@
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
303.334 6.896 mo
(1)sh
322.034 23.416 mo
(0)sh
340.734 39.936 mo
(1)sh
1.417 lw
347.404 42.926 mo
347.404 .406006 li
@
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
350.104 6.896 mo
(1)sh
368.804 23.416 mo
(1)sh
387.504 39.936 mo
(0)sh
.709 lw
393.824 42.926 mo
393.824 .406006 li
@
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
396.164 6.896 mo
(1)sh
414.864 23.416 mo
(1)sh
433.564 39.936 mo
(1)sh
1.417 lw
440.234 42.926 mo
440.234 .406006 li
@
%ADOBeginSubsetFont: XSAAAA+CMSS10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /XSAAAA+CMSS10 def
/FontInfo 7 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMSS10.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 66 /B put
dup 73 /I put
dup 83 /S put
dup 84 /T put
def
/FontBBox {-61 -250 999 759} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 444 461 656 678 694 716] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [61] def
/StdVW [78] def
/StemSnapH [61 64] def
/StemSnapV [78 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/B <1C60D8A8C9B64FADC6118E81E8A0A1F98B784226C5021CE3E9DB686D952F
270E2AE8411A326361219D7098A2F567F4031106ADAE85BA1681D1167B4D065D
A422309714D8FED917B97D204D83306E2BC2C3ED0ACF5C81890BF82C1D4D1CD5
37632FF156D06850B54BD1AF8A27B5E7DE> |-
/I <1C60D8A8C9B8574464FBC4422F56217A44B16194928D4DEC5E179A4B519B
056F> |-
/S <1C60D8A8C9B790A8C39BE29563CAB4C44767011475D17AE7A8421A209241
6C1B00F360586704A100B7B9FB13134CB86243C573772F8FF99C3406C93308BF
7D8DF73E72629C8A33D895C017C46636BC87CC23BBBBB0C812EB10221A46EFD1
72095BDEC776D7008CD8E82670837438D4D33C1D6C201516961EFD6913898FC8
EFFF260312F60883BD48F90B1E> |-
/T <1C60D8A8C9B65DE7084A9E9492A58835F7940251EB98B239FECA182B1BFC
F1490B6E4D78F5C11463D1DCC6B135919DD08858C1F3F60777E0E8860DD0FD54> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BKUCWG+CMSS10 /XSAAAA+CMSS10 findfont ct_VMDictPut
/BKUCWG+CMSS10*1 
[66{/.notdef}rp /B 6{/.notdef}rp /I 9{/.notdef}rp /S /T 171{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [9.963 0 0 -9.963 0 0 ]msf
23.3137 60.486 mo
(BITS)
[6.64236 2.76773 6.78085 0 ]xsh
%ADOBeginSubsetFont: DTOAAA+CMR7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWF+CMR7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7E2CE5B2D2AF3C16D655586ADDFD255F342CC78E0CFD77C
BD9B63EF6E836EA2677FC1E3515560DC8E1709808740B3E922280CDDC6B1DE59
498D3F96D52EB7A68A65E121CBB4EE62A5F7C7620A42A7CFE5CDEB9DCEFA2914
61A983E5129317168388213985652593802B6BD46B323DAA41AA2361FFE1897E
F8609C> |-
/three <1C60D8A8C9B7E2CEA7BEEFBD14AB8DF8CEA67D1B763E52ED51307E29
5A37DDE297DA459BE51B49EE11D0E205CF2263FD17827490680BA98FA0C5E982
DDE772750002A75B9868335940F176744F3EB008997ED6790000D7B3BA89101A
3D41944A427F325A6F2C91F15D8728BB9DFE8717AAC3CC1D2144BCEEBD3D3848
BDB42404126DB26B2C13BB479AE38C4F4ECB0DB04BCDC156E6EFA2214C178B5C
435107776FD9AF7FCB46E76B07C5AAB034F8EC> |-
/four <1C60D8A8C9B7E2CE5B62E9F191E798679064FF0C3AFF5C2953C7EE99B
35B9593ACD759052F67D5909B21E9F07A93BEECB88B7837B3FCAFA9C9F9D2751
01F3021841B6F1EE365E6D4F866337B858C156F46CCCC54B160345D5344E519C
3C4A92E5896F86E3AEB4D8FF6CA0281FF55EDEA6EC5DCCFBC5C08A0747092056
BF12D043FC4D9F8668B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWF+CMR7 /Encoding get
dup 50 /two put
dup 51 /three put
dup 52 /four put
pop
%ADOEndSubsetFont
/BKUCWF+CMR7*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven 42{/.notdef}rp /b 157{/.notdef}rp]
BKUCWF+CMR7 nf
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
7.06369 84.866 mo
(b4)
[4.40057 0 ]xsh
22.3437 84.866 mo
(b3b2b1)
[4.40057 10.8753 4.40057 10.8822 4.40057 0 ]xsh
68.8937 87.856 mo
68.8937 42.506 li
@
.709 lw
69.6037 42.856 mo
161.024 42.856 li
@
%ADOBeginSubsetFont: BKUCWH+FZJSJW--GB1-0-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (BKUCWH+FZJSJW--GB1-0-GBK-EUC-H)
%%Title: (BKUCWH+FZJSJW--GB1-0-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /BKUCWH+FZJSJW--GB1-0-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-16 -223 1004 863} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 8030 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 5 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE31F4> |
2829 <001C60D8A8C9B5EE3102FA0D42705D9259FD1C5A259B6F43D1A25F2E2F
C69A21E74040B00CA595E93BFCEA7DF8A2B91A56FC91E06CEACA92CA8127EDA9
36709790B9E693252E207EC677E16BE8EDED5DAD2581B75AD1B55B1324D10672
B351A96FE52DD2EF34AB35C6122EEC30FC6764EBE8704E58EE324075C3BCFF5C
561DCCF06CDAEF0E44046DFFA24853C3EA32252E447FDC0846B5CCC53C397594
A2477C49CC7BF26F80FC30A987583EA177BE05218B67DE63ED75E791E74DBD1E
407CB0A45F11F30562D00305DE013D5D9973DCCDC2613B45201F8C877149B89B
E2A34BA231370D25247A8BD6A02C121B0B7B46EE4C5EA1950E4CE1664E5A67E9
F9FD90E7C05F3C3F56371E170FD6BE08EB0FE121011EA45590F05D586934AF8A
148ACB8EC69EE096DC529C5F87AE67F5FAF35A1CF896874CF4569164E62F36CF
050F8346A646237AA68B78DDA84990DCA290F4710EB55F995F14034F63A9F754
E7A354701F7FE2C4D885C572E16FA62C8B61D95153AF391B9F907865425676AD
CC987F4E94171E5369D1C12E86F4C9518EF31A43A930E5CC223A8C12773546A4
496CFD5FE0BCBFD00C978427939FD3A3270F53B00935858D3A1CE6DE45F8687F
36F2C9FB43F9FF96> |
1156 <001C60D8A8C9B5EE3102F2773E20974AEDDB055094B8036B0406FBC341
C384FE9B8558DFE03C1375A9F1F48C77BA89AB58E1B0081DA3B985A30003C07D
F3F98E71104DB60F49F03BFB19B038B5796D03B86690DD3841FC9BDF8004C674
BD01A5BF4AEFF057F888A7EAFB1ADD202952E0D077AFA6F2F83CA04D6A79D0AD
9F9068C390B5BD8D503FDA527EAAB6AB00F8341FCD146A733A016B0464608C6D
02CA9D438F66F44BE09D3E5B3293BDCD038A9AB096811D8D5D5589594367FF72
E29E3EEC8E0C139D7D0B6E017547B25A11656A88825B561BCA49EB08717ABC96
DD1B01DEDCE0D6459C83104C1EA74473D4C96A7FFACE3C5AB4F9549869777C74
827BDD59D6B3F31584DD76DD2DA8B14B2AD5B071B1C68AB31A8080ECA6C2131C
8205869B26DFA21DF258818A69F414E7EB39B937233502B2AF31AEF7387638AC
CA3F7A1C145E6C3CFA87120EB105C5F802AF32AE98F1E0515A590E12714E6C19
6AC4E6630CA3EAAB6F484E326F> |
2010 <001C60D8A8C9B5EE31033F3386599743A52651C817F6F547B5315F54E3
3AB0FCDD6306C285D1E2998B8F4C3E508CB4843A823DF088ED2A5072E4910217
CEA5BC1252C79136CE7A77626E260FFB838A16F9B50DBAB91D8B2174BC4788FC
143756F9443F9B7EEA4F2AEB8178DD163397DE645112FF33D8B8D7353DEC1ED7
BB00C070FC48CC9B5FBC40D33E2DED7CB9973FAFB8B00201AB015CE52EBA5DE0
A351B9B49F42322FC7F0400AF329B23F7B68249E3C1FDFC8D5011FF200870618
CF6A49A0B7D2BE58EBBE551ECF5267464EC6EA5A161220840C00CE1A98F9742D
E2DCBCAD657010B48E5B7BCE96CBBFBB81C7F8E02A58251FFAFD811B695F1CEB
0D053BCD2766D1E7AF7DE218FA499EBDDFFF3F0F37E3A2FE18625A6B> |
4736 <001C60D8A8C9B5EE31032B5C0029FC5301EF976327C7A003956201586C
2A9C095E6CB8D96B9F8BE2994BCB75CD38CBFED6EB306B1890011908EB742EC3
730A4EEBB98719E2BAB1B193B615381604EC2FDE84354A60E76439D17295C950
9B0499FD11ADF68742F47B344FAE0976662A5557C272F21D36A375901A7552CC
203B9E09D4BF2B91C78A1AEFF9F201E8055557693A01640EF98BD86D8A4FF51E
ABBF51D41D356F7B2F254E29EF09B1357D06FB9A214E54B9BE254C09F147C99F
B10240E40F3A148EE0DFE30127918B98D45E8506735E5B67E799E883ED1727C2
43E090E7ECA8C3A8D68D0F0C2554E965AAF9D51FF622D3D1D6CA2980A99E7532
A9D25FBC281E47950F71B644343BEDC9012BA712FAB37A5D48B7D64E1B2D153E
5DDEB1FE207C57B3060CD75DABC195090FB5C1B58FB9E5F7D577BBF3FFFCBD65
B5904B567140B95F83FE04BFBEEE776E41259BD968A48CF6C6B14C733ECE6374
4009B93B0D381DA67EA90361CF5710BBA3728EBE83AE760CFFB1B7BC9F575582
D0DEDF984DFBECA9F57D54FF281A337F2891FF3456CDDD6F680B896FE1CFC590
A069BA36A74B71D81EA11669F11748F8C4FE826F70873C71E304272541E3ACF0
93> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /BKUCWH+FZJSJW--GB1-0-GBK-EUC-H-Identity-H /Identity-H 0 [/BKUCWH+FZJSJW--GB1-0-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/BKUCWH+FZJSJW--GB1-0-GBK-EUC-H-Identity-H findfont [10.501 0 0 -10.501 0 0 ]msf
94.3137 69.286 mo
(\013\015\004\204\007\332\022\200)sh
1.417 lw
161.734 87.856 mo
161.734 42.506 li
@
.709 lw
162.444 42.856 mo
253.854 42.856 li
@
%ADOBeginSubsetFont: BKUCWH+FZJSJW--GB1-0-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/BKUCWH+FZJSJW--GB1-0-GBK-EUC-H 3 GetGlyphDirectory
1346 <001C60D8A8C9B5EE31036D2478CBA65772E6201964F8A43E85E021183D
6DB256C3D620671C18D6FFFB53BAF0EBC3B45A4A0AA2082A981B7E0FBDAD69A2
5340CDE3A957186C4ABC71BFE1BD5901AD56B9C7626139884E478AACC4BF0223
B38181EE412B4129178D0D8FE053E63B940B19C2E908C6881D2CD62A906D94BE
1CBAFFD94C6669222F43C84D5800628387BF3B1361D8C6E2A549537CF2DBEB6B
C0125721DA36374BEE8A67EBB5472AF1CCF93AB4147F14314B730C5A676612AE
C0D510DA7D300D7D5AD61EA0B44411928850DB58B19199C8FDC0260CB790915C
FB8735805915> |
1431 <001C60D8A8C9B5EE310086C293742041E5CC4CD66A7397B0952232008A
505CE2CF27483482B2643CB85CD65E3A4D46FCF74F4CE556CB603E78964AA5CB
95515E8C4CA3F83E9DA2A11AA66486E40C0D000411EF9D8002178FDA90FAB628
1CF3E4BB103353BF2F1F4ECB38EAD368A5501A8B61210CAF7BBCC453C5E30D1E
5A8AEB2D9FB28E5464E301592D6E797E096B92974276ACB64BD92958D62BF91C
1F8E9C642BD62CA522EBF0FE1619944362857FB2786064EB315BDC61FE109C4E
CDFBC2207B358B75C7919F7C7B8E133DE847935B0132B0CA795138B028B9A1F0
44F2BBBA17EA4DC4516A1431270E111BEA42C2F02ABB3F3D33E74BF6A2EB1CD2
818586BAF85D0355AEDD8EFB7B2042B9D6FE97A223341957C0> |
2973 <001C60D8A8C9B5EE3103B00391ABBE3BB4EAF147C375ED7E26F175B9E6
ED52EC888D4F61AB6FD6ED73EB8B92F11A87C64D99C0B3AE16F7C871379561DD
300034C29B3CA64F1B60D7FD422876A4578ECFBF7191758CFACC99E211B0E85E
0BE3394D097C846F07A39110E89F9708ADCB8F9537C89FDD08A7CD34F484DB3E
C984214406E002036BE0CA6F05328AA5264D8984B58C337AFF48CABAE46B2CF1
23C9345C72CB329868AE18A7B4E1C588AAFEECAF00437E0488B2486509296393
4E1AD42B00F5F27341D82C186314E1374A4063329D3E698FFBBEA2FE9A7438B7
D5E2C04B9C0485B617624FA6BE88413D2CD6E4BFC5CD537A7329E90F0E5DCE47
73FA2A147C5833463A11A76FD530526E7D83F3CC2DAE685BE24E6A3D1FFC3E15
F2B5151C547FB5AA6963E3468A523C811112B068455F7C1AEFE6798F82F1BF09
91603A645FD655C4E3C3D06D6EE3D8CB0D6CA9214DB486538612E6097E2723ED
EFC5FD3E0A9977FFDFA5586109D8DEF8DA26B26DEF1B8CC5162A0B872B7F1FA4
3C385B379FDE9D57A19283951F93F6F502F3FAE9DFA44B409D2BC31D39F5BD76
8A2D5B2B026C1591335665F43CD43BD338688F6686734E29E12EBCCE9860D263
E97AB6173470D7100D755BC9A12DEC72FE183B9B0CCB1EDD2CBC588FF31524AC
2243991BAF4FFD2F7E8F2449942504ACFE2FA6F83F257DC0EB17137344B76BA7
A2F7C06162F92C94EE12833CCB95733137A73153DCDC302721F8AC8BAF26F4C0
BCD9DE9E1F6268DA5FC7A1C3EE99E0CBAC86A22CEE74080DFF> |
!
end
end end
%ADOEndSubsetFont
/BKUCWH+FZJSJW--GB1-0-GBK-EUC-H-Identity-H findfont [10.501 0 0 -10.501 0 0 ]msf
181.894 69.286 mo
(\022\200\005B\005\227\013\235\007\332)sh
1.417 lw
254.564 87.856 mo
254.564 42.506 li
@
.709 lw
255.274 42.856 mo
346.694 42.856 li
@
%ADOBeginSubsetFont: BKUCWH+FZJSJW--GB1-0-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/BKUCWH+FZJSJW--GB1-0-GBK-EUC-H 3 GetGlyphDirectory
1848 <001C60D8A8C9B5EE31034E25716F6460445F269F07AF4006A9797242FA
13A8417EF342F8D32572717157362E848560C28D4B4C99F90B01B2D4418AEFEF
478F6939D713FB6B6F2975B65A51A297BE9A27C2006ED709C77D0CCF8C8A5C55
AC804B24D89D51448DD11500621AAEC8410BCBF9B6D9B3044896D4E007E048B7
6DAA914E92716BF4C262> |
1080 <001C60D8A8C9B5EE310371E13BB422195257A9B029314FFB3FCCE4C173
6D2F62AB41AF3243D14FA9FF4F94D97A79C9CD44BEF44205401996216285E9B0
4C94A8A656A66C4CBB58A3A73A466140403F0D033CD615C5EDA29B66FADA73A5
603A2C5ADAAE7D0F6D529281B052C7EAA6B2B766C6250A6E3A7183549E1D4A37
831C27DBF0F12397077153AB96210E2C76C74E47410EA43C22F0F9F26DB833FF
CF727076A60283606FA16825775B1B0FC026C5F1C593A2735A73843779008F00
83E77E710968B198C17038348E19DDB2310E48911519622E8650748DB5A1DC43
C8FB9B1C393AB589787A3F8A62AD4584B320FE28B4C7C860973FBB8A84FFF840
BC62CA6A7D1EFB31> |
3463 <001C60D8A8C9B5EE310337A951C3942B4C4AF45048009F2215F4617A4A
95EB3A2A967E5806F7238CF7AF73939AFF58CB14AC6F630793094AAE2AB7730A
7D1BB7D39C8376D7A458A828FB8F500CC28F909A3E5BA20AAF36D3BA3358F637
4DCB87BBC1020E91B6D9C88FB10C2E08EAF7BE8CF982E486D1CB26309DE51AE9
40AC3D3051B7F4E4ACC91CA8AC7A9C234E5CB3CE19FB62F29BFBABBA51831433
0BDAFE21E5B6AA752D08318E7CC890875E7CD3997776FE793446E2D80B49CAB6
567BB5F8D818849772B28AE597285BCC67312DCA146D68BB69A44DB9B523027B
F6332017B8AEB828EEF2BBCFFFF8AAB9F4482168B0698DF200AE3D6FBD1BEE61
974F075F593ACE8CB01213CFA22CC19C21> |
!
end
end end
%ADOEndSubsetFont
/BKUCWH+FZJSJW--GB1-0-GBK-EUC-H-Identity-H findfont [10.501 0 0 -10.501 0 0 ]msf
279.984 69.286 mo
(\0078\0048\007\332\015\207)sh
1.417 lw
347.404 87.856 mo
347.404 42.506 li
@
.709 lw
348.114 42.856 mo
439.524 42.856 li
@
%ADOBeginSubsetFont: BKUCWH+FZJSJW--GB1-0-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/BKUCWH+FZJSJW--GB1-0-GBK-EUC-H 1 GetGlyphDirectory
2101 <001C60D8A8C9B5EE3103DF308D0682C6043595DC160360E43813A6BB43
676EE6EE8B555CC2D5BF107B22DBC4B0807E682C25BBDFCB1F556593FAE9F725
D60B595CD9BF320679257FBB67676BB4AAA437A963A0F467497648B6C0E6C2FA
05505154944C3D9A4A406FD46CCAFEC74A4E6A46E2EE357B6A3ADA491552F501
A14A4C193C50A8722DC0791E288FF7EB9B17FCB90FC30670D813FBD57794E3F7
E6AF058C98149A9059F8FCE743D01BD6F04ACCBB02> |
!
end
end end
%ADOEndSubsetFont
/BKUCWH+FZJSJW--GB1-0-GBK-EUC-H-Identity-H findfont [10.501 0 0 -10.501 0 0 ]msf
372.814 69.286 mo
(\0105\0048\007\332\015\207)sh
1.417 lw
440.234 87.856 mo
440.234 42.506 li
@
.398 lw
.15369 88.056 mo
440.944 88.056 li
@
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
10.5837 104.676 mo
(0)sh
24.9777 104.676 mo
(000)
[14.4041 14.3971 0 ]xsh
1.417 lw
68.8937 116.606 mo
68.8937 88.256 li
@
%ADOBeginSubsetFont: IRRAAA+CMR5 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /IRRAAA+CMR5 def
/FontInfo 7 dict dup begin
/Notice (Copyright (c) 1997, 2009 American Mathematical Society (<http://www.ams.org>), with Reserved Font Name CMR5.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
def
/FontBBox {-10 -250 1304 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 431 448 666 677 683 705] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [44] def
/StdVW [89] def
/StemSnapH [33 44] def
/StemSnapV [89 106] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/zero <1C60D8A8C9B65DE7F67844F3E0E332D7DB81B00795DA423ACCC77150A
F8D30658E0CB7AE5058723184392A041DB96E759A3E190631A80D33DF8D1803A
A41E0F0B4D1DD918F9005F7B8D8F6EE441C048E2E37D86DD5222CDB4F2CAB2BA
97E10C6379FCCC93F0827D140310FF7F023CD641BEF9BE0BC471E> |-
/.notdef <1C60D8A8C9B7A73D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BKUCWI+CMR5 /IRRAAA+CMR5 findfont ct_VMDictPut
/BKUCWI+CMR5*1 
[48{/.notdef}rp /zero 207{/.notdef}rp]
BKUCWI+CMR5 nf
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 93.456 mo
(0)sh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/L <1C60D8A8C9B79EE33060974589B17066210DD7F5338AB2D00916C98CB9EF
A8FA42E9D44EAB6F5203BC97A3E2> |-
/N <1C60D8A8C9B639EEFA1D1947F9A75AE7EB81B15E5E73D5ADC92165298EE5
166B46E55FD33885BC7A17C22AFC8C24E4EAAF09D528A61A984A9D663D955269
0BA201A502D6728ABE902EBA> |-
/U <1C60D8A8C9B6225A4E90902A59378672AB462844F8E99EE644413EA7F9B3
BA3A09C91A26CA735EE33ABCEB9D8AFABE28C62C573918086507C22922085C1D
870D37F37A5166D867F7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 76 /L put
dup 78 /N put
dup 85 /U put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[66{/.notdef}rp /B 6{/.notdef}rp /I 2{/.notdef}rp /L /.notdef /N 
4{/.notdef}rp /S /T /U 170{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
80.7037 105.916 mo
(NUL)
[8.4677 8.21907 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 113.616 mo
(0)sh
109.574 113.616 mo
(0)sh
.709 lw
115.314 116.606 mo
115.314 88.256 li
@
%ADOBeginSubsetFont: IRRAAA+CMR5 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWI+CMR5 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B65DE7085DF0FA0A84A4834594A66D768B5EC4E09A6E93CE
BAF938136994B526CB5C00E02356C32A08ADEA3D000069B69A38C2621BA52A18
ED1E05C64AAB620F7820D652E3A7C376702573CF199169787892A20781D3AC01
165FDB2EDBEF137DB96A04A56CAB832FBE39507AC9D82DCD> |-
/two <1C60D8A8C9B65DE70801C3C3383F60D3FAAE55916F19441667007AAD7A
2FBB53777470DE10B94015C23F2E8DD30F5291EEC6D832756CF1BF45B2E623A0
FDB5B1171CAD528DC762A696846340AD60BDAFE36ADF26F7E7E4E4666504C3A1
56D4124CD661EB97CF6D38C0B126931996458479E8229E0C089A486BD5138D1B
9CE00A666CCF4ADBAC78> |-
/six <1C60D8A8C9B65DE7F660EBC1BBACCAC28EE95DF34B90D8807BC3CA1D20
F9D300DE0F55DDA038FC31C534A53876BB3A93D3294BFE77C2B932C8641850CD
3E03C07844BE36902A4CDC915CFED09D15B9A5BEEF171C9BC7CF408A960127C8
87EEE351FB73B83C9E78BECACAEB37D0AA328EC92603043D1AEE45BFC9940B00
4E77210E5C72BC991E05C45D9A9CA01B6998015B4A90E259BCA90C11F08FC701
092A841EA0485084C5D143F01A004C88417EF40909A13D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWI+CMR5 /Encoding get
dup 49 /one put
dup 50 /two put
dup 54 /six put
pop
%ADOEndSubsetFont
/BKUCWI+CMR5*1 
[48{/.notdef}rp /zero /one /two 3{/.notdef}rp /six 201{/.notdef}rp]
BKUCWI+CMR5 nf
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 93.456 mo
(16)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B6079F1E15641EF91FA294D3A7604B656E0CEC5A8D49ECFB95
02B4A4155333E97180A3701C2A106229E206C310162B9DFC1D0598ACD7F72092
CB073C5A74B28FDDD514F6FE37EEE6144B89> |-
/E <1C60D8A8C9B7C63D8BB9BB1C49623237F1282FEA0F31E72B1E9AB727EB21
894A99EEAAE6E7DD7008AD8BF6B87CD796A3F9E57DFFF3CE24D24322A918564E
F351AD8DD00AE9F1BE1A3941ADC28733AD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 68 /D put
dup 69 /E put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[66{/.notdef}rp /B /.notdef /D /E 3{/.notdef}rp /I 2{/.notdef}rp 
/L /.notdef /N 4{/.notdef}rp /S /T /U 170{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
127.224 105.916 mo
(DLE)
[8.63387 6.47606 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 113.616 mo
(10)
[3.39009 0 ]xsh
152.254 113.616 mo
(20)
[3.39009 0 ]xsh
1.417 lw
161.734 116.606 mo
161.734 88.256 li
@
%ADOBeginSubsetFont: IRRAAA+CMR5 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWI+CMR5 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B65DE7F660EBEA42267A7A28CC127DEBF8D496B262257D
E1A86D16E4E3403DF54327D681BE93486740421776C796FC1B4504295E8083DD
FB132DE49CE47DE83E6DE0264233743A7BFFF59E26A58EAED868164EF61CCAF5
F1FBFEDCE3CA28344B8E4BB0FE938D3E1F6C482407493C16ADF41FDFE2B55B91
2C6B65301869D334CC3DFD8EB357917DC6B478162E2A18B0AC06A45F07724AC2
80D701188293442FD68DABE8E5A7DEC5447B2AE7> |-
/four <1C60D8A8C9B65DE7085DF0F5F7FDFBAC763DECD40AECB3EFA8E876E47
CFD31F17148A109EAFB3B2883FBEFCD613BA4934EC398847123CA08EB58ACC2B
3F70C776A908E2ECCDAAC18BAAB7FDA6ECADD50A0FDC9A457B4AAF53C98B4C7F
05CE09749651A8B962AC5506626F8E1DED1B3360D5C1ABC64800D85D265878B4
C3C778AB60D8E34222FB4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWI+CMR5 /Encoding get
dup 51 /three put
dup 52 /four put
pop
%ADOEndSubsetFont
/BKUCWI+CMR5*1 
[48{/.notdef}rp /zero /one /two /three /four /.notdef /six 
201{/.notdef}rp]
BKUCWI+CMR5 nf
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 93.456 mo
(32)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/P <1C60D8A8C9B673A51B05B6EAD0D2DB4CD8E3012EB584C10C09131B2CB89A
A0BD11FB2044B5C323E20CC2DA68E08C2DC5B55F8AB21854D8519A53A2F81665
AEAB392408BC70272137ADD0FF4FE15AA7A445> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 80 /P put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[66{/.notdef}rp /B /.notdef /D /E 3{/.notdef}rp /I 2{/.notdef}rp 
/L /.notdef /N /.notdef /P 2{/.notdef}rp /S /T 
/U 170{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
175.984 105.916 mo
(SP)
[6.64223 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 113.616 mo
(20)
[3.39009 0 ]xsh
199.024 113.616 mo
(40)
[3.39008 0 ]xsh
.709 lw
208.154 116.606 mo
208.154 88.256 li
@
%ADOBeginSubsetFont: IRRAAA+CMR5 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWI+CMR5 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/eight <1C60D8A8C9B65DE7F660EBC0DFDF641346718361F97EE876009FEEDD
40AEBD415A4FE3DA72B8F955925B527894186B9C84CA7B6935F86EEE9D7DC9EF
606F7A7A5E9E34213FDA76D292ABD25BFD6AC8BBABA62995D2D1B52E2D67B4ED
789D8100368E0FEC58FF2F43E0A4BDB8447CA3DFAA4A8A915959551C5CEAAE2F
C1A936F7045E9611B6960C8E3E8E11F8CBEB7ABE52A5A64F370C0A697A777F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWI+CMR5 /Encoding get
dup 56 /eight put
pop
%ADOEndSubsetFont
/BKUCWI+CMR5*1 
[48{/.notdef}rp /zero /one /two /three /four /.notdef /six 
/.notdef /eight 199{/.notdef}rp]
BKUCWI+CMR5 nf
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 93.456 mo
(48)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7A73D3B44BE74C368F4E2FC0D1E282D6B80C084CC069A0
A14712591F89EABDE27294D1768DD69DB23E7FDCDF76DD01EA2CE0CCF6F4531C
8A5BCAB0F1BE07F8191DEC09C9A3BC8F2BD2C623D1D6E463DE09FAA97A87D431
A34F6930759E9BEDE1196203F9A0CFDDAE3BE022EED71EB4AA4845FF1759BB73
5B5433870BF2F7C4D6B648D9C9DDAA0B7F47B27B9132A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 48 /zero put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[48{/.notdef}rp /zero 17{/.notdef}rp /B /.notdef /D /E 3{/.notdef}rp 
/I 2{/.notdef}rp /L /.notdef /N /.notdef /P 2{/.notdef}rp 
/S /T /U 170{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
226.204 105.916 mo
(0)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 113.616 mo
(30)
[3.39008 0 ]xsh
245.084 113.616 mo
(60)
[3.39008 0 ]xsh
1.417 lw
254.564 116.606 mo
254.564 88.256 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 93.456 mo
(64)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/at <1C60D8A8C9B64FADCDBF17E90421CD12041A3A53BEF0D46A10ADB714F9B
8F6FF9AF1C7552ECD1609CF78CF0A40A6612051307F40407359CB3AB22DAD444
A14CB79E6839E06C949AB2768769518E19C36610BAC36359850C163EC13CA6A4
99D52254A84B72D94740465A3F50105BDDE20C496D345861DF3EF822D8442487
D683FC7E9D78347449ED86F9823BAF19EB7CCAAFFD2286F5B721D2C40BE3D2CE
6B847E8784D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 64 /at put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[48{/.notdef}rp /zero 15{/.notdef}rp /at /.notdef /B /.notdef /D 
/E 3{/.notdef}rp /I 2{/.notdef}rp /L /.notdef /N /.notdef 
/P 2{/.notdef}rp /S /T /U 170{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
271.974 105.916 mo
(@)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 113.616 mo
(40100)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
.709 lw
300.984 116.606 mo
300.984 88.256 li
@
%ADOBeginSubsetFont: IRRAAA+CMR5 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWI+CMR5 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five <1C60D8A8C9B65DE7F660EBCC739135D6D4F60F16C5A843257D62C7FC4
E07357E1D3445FB77C971FD674B8419B48128682FAE0C93F8DA6E212791AAEF0
430D7EBF05290329BDEAD3E19B7826E012FDFA44DC1A7676EA0DE8D677C7B314
9E6B3E385DA54A02ADDEB664707E413B3F78634BD02982F80A72A5CC7DECC959
0CB959D61CC88FFEDEEC50C0FF1F32E4AAF9531D8733284788429ADE7B40C75B
3C7D46B72632A9BA72B859378DAECA18380A04D864B90991BB9CF6B1463B3154
428917EB5303B0C1C3882> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWI+CMR5 /Encoding get
dup 53 /five put
pop
%ADOEndSubsetFont
/BKUCWI+CMR5*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/.notdef /eight 199{/.notdef}rp]
BKUCWI+CMR5 nf
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 93.456 mo
(80)
[3.39008 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
318.204 105.916 mo
(P)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 113.616 mo
(50120)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
1.417 lw
347.404 116.606 mo
347.404 88.256 li
@
%ADOBeginSubsetFont: IRRAAA+CMR5 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWI+CMR5 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/nine <1C60D8A8C9B65DE7F660EB8D4145253D32288D21DC27BBF3723F11194
71416E766D3F3B6D5A5E6CD984A240B3333C2AFFDF0E76EBCAD8C9072F20286B
6F9841D1A1AA5541AFDE4F1BB19C839537AC721CF26BC752E86228DF03D67305
CB16637937EB64F52B791CF5E66068F5728174A4F8911193309F5A334D1889E0
BA6E4AB6E711DF0CDBA97C3B5B61DDA5F458AAA04402E282280AC2730DB9953A
4E3E7022163D1DFDB4D9E88912B3F7C149B8344331118> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWI+CMR5 /Encoding get
dup 57 /nine put
pop
%ADOEndSubsetFont
/BKUCWI+CMR5*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/.notdef /eight /nine 198{/.notdef}rp]
BKUCWI+CMR5 nf
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 93.456 mo
(96)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/quoteleft <1C60D8A8C9B85744173E338F49F06408E547E26CA5096B2B230F
A81FB6EDE54A4FBCC3A4FAC4EE1B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 96 /quoteleft put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[48{/.notdef}rp /zero 15{/.notdef}rp /at /.notdef /B /.notdef /D 
/E 3{/.notdef}rp /I 2{/.notdef}rp /L /.notdef /N /.notdef 
/P 2{/.notdef}rp /S /T /U 10{/.notdef}rp /quoteleft 159{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
367.134 105.916 mo
(`)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 113.616 mo
(60140)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
.709 lw
393.824 116.606 mo
393.824 88.256 li
@
%ADOBeginSubsetFont: IRRAAA+CMR5 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWI+CMR5 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/seven <1C60D8A8C9B65DE7F6740A23FEA6DC81C2AA9BBCE97AE3445215851B
63477A080DA974C72DF5D403852240509B8DF640E65DFB17B4494F1C673E20D6
6B788573711F5E410E34F38FCECC30E117E6411FF1A5612D8A4B619665CDD9BF
56E9D7EC0CE492B3A68C1D55D227B940BAF5D443CC1661F8595DC772> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWI+CMR5 /Encoding get
dup 55 /seven put
pop
%ADOEndSubsetFont
/BKUCWI+CMR5*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 198{/.notdef}rp]
BKUCWI+CMR5 nf
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 93.456 mo
(112)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/p <1C60D8A8C9B7B71A401521EFAFFC87595FB9107185CDB6BE7DDAEAF81CEB
CE462D81F0291C4C1D750855BCB321DCEB30D0F293A0DC910A249A6B5D487CD5
E1F65C3AD6D7BA5EE2BC2B5818A2389DD74DC4EDB2D916E0DC2E85C9B9450915
7654165891B9658B19> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 112 /p put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[48{/.notdef}rp /zero 15{/.notdef}rp /at /.notdef /B /.notdef /D 
/E 3{/.notdef}rp /I 2{/.notdef}rp /L /.notdef /N /.notdef 
/P 2{/.notdef}rp /S /T /U 10{/.notdef}rp /quoteleft 15{/.notdef}rp 
/p 143{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
411.774 105.746 mo
(p)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 113.616 mo
(70160)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
1.417 lw
440.234 116.606 mo
440.234 88.256 li
@
.398 lw
.15369 116.806 mo
440.944 116.806 li
@
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
10.5837 133.426 mo
(0)sh
24.9777 133.426 mo
(001)
[14.4041 14.3971 0 ]xsh
1.417 lw
68.8937 145.346 mo
68.8937 117.006 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 122.206 mo
(1)sh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/H <1C60D8A8C9B639EEFA1D1949B2E5FE2EC140D02FF4FD4EC85EEDFBCA2A00
47F176B2A854753134C607A26C94450ABA45E56BB47D3C0CEAA4B12625401802> |-
/O <1C60D8A8C9B615D12DA48EA07A899AE4C30C38138FB5BAE5AC5AC04725F1
74A5083786F4DE40FADD2154ED3010A073E1A5783912ECB97A63DCEFD1A827AF
D5B62FEF271614B65100E5E241DA75A70C0541FE7E64574398F23074D6947C6C
61A3F00700DC3DA013AD07> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 72 /H put
dup 79 /O put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[48{/.notdef}rp /zero 15{/.notdef}rp /at /.notdef /B /.notdef /D 
/E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /.notdef /N 
/O /P 2{/.notdef}rp /S /T /U 10{/.notdef}rp /quoteleft 
15{/.notdef}rp /p 143{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
80.3237 134.666 mo
(SOH)
[6.64223 8.80008 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 142.356 mo
(1)sh
109.574 142.356 mo
(1)sh
.709 lw
115.314 145.346 mo
115.314 117.006 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 122.206 mo
(17)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7A73DC516E502D071D3E5EFB09D24340CA928DF0A691007
E1845C890D948062796F6CD87850B222F312B9A1047DDA1457E58E9699EFA460
BF3E57> |-
/C <1C60D8A8C9B672D45B91DAB685623773AADEECCFFAB3F2A20F172C38130F
5ED0CE93BFBF240A2B7A7EE15210C24C85B52E3EBA932EA2234A4F4E772B2BE7
CDF13A976E35256A12D3BDBA42F8B4AFA16A4FCB89D654A408EA5750> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 49 /one put
dup 67 /C put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[48{/.notdef}rp /zero /one 14{/.notdef}rp /at /.notdef /B /C 
/D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /.notdef 
/N /O /P 2{/.notdef}rp /S /T /U 10{/.notdef}rp 
/quoteleft 15{/.notdef}rp /p 143{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
127.224 134.666 mo
(DC1)
[8.63387 7.63806 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 142.356 mo
(11)
[3.39009 0 ]xsh
152.254 142.356 mo
(21)
[3.39009 0 ]xsh
1.417 lw
161.734 145.346 mo
161.734 117.006 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 122.206 mo
(33)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/exclam <1C60D8A8C9B82D668F4D9FDC70054580B250351B81A1A758C709110
0072C18BFF4425F28A32A5E124F7CFFA240E91A21F7C1A8F047> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 33 /exclam put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam 14{/.notdef}rp /zero /one 14{/.notdef}rp /at /.notdef 
/B /C /D /E 2{/.notdef}rp /H /I 2{/.notdef}rp 
/L /.notdef /N /O /P 2{/.notdef}rp /S /T 
/U 10{/.notdef}rp /quoteleft 15{/.notdef}rp /p 143{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
180.554 134.666 mo
(!)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 142.356 mo
(21)
[3.39009 0 ]xsh
199.024 142.356 mo
(41)
[3.39008 0 ]xsh
.709 lw
208.154 145.346 mo
208.154 117.006 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 122.206 mo
(49)
[3.39008 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
226.204 134.666 mo
(1)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 142.356 mo
(31)
[3.39008 0 ]xsh
245.084 142.356 mo
(61)
[3.39008 0 ]xsh
1.417 lw
254.564 145.346 mo
254.564 117.006 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 122.206 mo
(65)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/A <1C60D8A8C9B64FADC672C719DB1F45C07AF49BAC4655B2301D66E18157B4
BF1A1FA5F6F76AE6D4F927C8C3B8B755182F533EA0446336CE8FFDCCF286E3E8
102E1BEF7A2FB07C9D5BD0B0C25CB93D433C06> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 65 /A put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam 14{/.notdef}rp /zero /one 14{/.notdef}rp /at /A 
/B /C /D /E 2{/.notdef}rp /H /I 2{/.notdef}rp 
/L /.notdef /N /O /P 2{/.notdef}rp /S /T 
/U 10{/.notdef}rp /quoteleft 15{/.notdef}rp /p 143{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
271.974 134.666 mo
(A)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 142.356 mo
(41101)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
.709 lw
300.984 145.346 mo
300.984 117.006 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 122.206 mo
(81)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Q <1C60D8A8C9B615D1A39E440BCDDD3329685DD7E34AF413248B1DB53B4A6C
050746576D1389F87AC0A2ABD07F6F38CB6568AED8BBDF0F74345FD27F891C06
8BB31B72C51CA1C7670729A035BABF1C7A16AB11522DA44B9422A72C04A53BE7
27C71F21B988E3FBAF0F500628E9B9FAC4F52E8603A1A6747FB8F9D96FD1BDC4
B4400C1A596CEE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 81 /Q put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam 14{/.notdef}rp /zero /one 14{/.notdef}rp /at /A 
/B /C /D /E 2{/.notdef}rp /H /I 2{/.notdef}rp 
/L /.notdef /N /O /P /Q /.notdef /S 
/T /U 10{/.notdef}rp /quoteleft 15{/.notdef}rp /p 143{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
317.624 134.666 mo
(Q)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 142.356 mo
(51121)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
1.417 lw
347.404 145.346 mo
347.404 117.006 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 122.206 mo
(97)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a <1C60D8A8C9B75BE56E33EB69405267CDDC8DB4C66FE9B1473F4E80C7A28C
AD56100A17F72621ED8AE9CAC52360ADFB886B00F8AE36A7804C886400067321
140FA115B1A1C52E49A8B8E111DF40827A37FDEBF533C521D5AE7DF3D5D00062
EE305CF4BF08EA8722CF10765BFA02BF9B87B0FF67DDF91C0D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 97 /a put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam 14{/.notdef}rp /zero /one 14{/.notdef}rp /at /A 
/B /C /D /E 2{/.notdef}rp /H /I 2{/.notdef}rp 
/L /.notdef /N /O /P /Q /.notdef /S 
/T /U 10{/.notdef}rp /quoteleft /a 14{/.notdef}rp /p 143{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
365.924 134.666 mo
(a)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 142.356 mo
(61141)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
.709 lw
393.824 145.346 mo
393.824 117.006 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 122.206 mo
(113)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/q <1C60D8A8C9B7B71A401521EFAFFC87595FB9100370858887DB99A90533BF
BD814C07822BE6E8F8B09D3CDDF8162105A027A688BBDB9A98A998697204B857
7D092E626CD0D9B1C543607C2EFE25BFE2CF661751CD36EC571F7AC019745A96
991E3E8117FD9FE1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 113 /q put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam 14{/.notdef}rp /zero /one 14{/.notdef}rp /at /A 
/B /C /D /E 2{/.notdef}rp /H /I 2{/.notdef}rp 
/L /.notdef /N /O /P /Q /.notdef /S 
/T /U 10{/.notdef}rp /quoteleft /a 14{/.notdef}rp /p /q 
142{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
411.774 134.496 mo
(q)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 142.356 mo
(71161)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
1.417 lw
440.234 145.346 mo
440.234 117.006 li
@
.398 lw
.15369 145.546 mo
440.944 145.546 li
@
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
10.5837 162.166 mo
(0)sh
24.9777 162.166 mo
(010)
[14.4041 14.3971 0 ]xsh
1.417 lw
68.8937 174.096 mo
68.8937 145.746 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 150.946 mo
(2)sh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/X <1C60D8A8C9B64FADC672C71728CEEE05718E33460C2CD072ED564A5FFA3F
4DD9E12EDFA57EC5CDB3B319BCAD17E7419D2A222692AF719DFF1A57385BA61A
620C9F45552113> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 88 /X put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam 14{/.notdef}rp /zero /one 14{/.notdef}rp /at /A 
/B /C /D /E 2{/.notdef}rp /H /I 2{/.notdef}rp 
/L /.notdef /N /O /P /Q /.notdef /S 
/T /U 2{/.notdef}rp /X 7{/.notdef}rp /quoteleft /a 14{/.notdef}rp 
/p /q 142{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
80.9137 163.406 mo
(STX)
[6.64223 8.13661 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 171.106 mo
(2)sh
109.574 171.106 mo
(2)sh
.709 lw
115.314 174.096 mo
115.314 145.746 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 150.946 mo
(18)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7A73DC501F4900507988D419B48DDAD77641F5B7B7A0610
F725F249F9EF901FABA150F5DFDF3368527C74C6E805BDBD5282C0C7160670EC
94102CE3399959A838F779795ACA3B9153D7D64C1E5390455DA9733A521E3252
4900C9F4B7B6A6150799E5B7DB8A4C7CD8F7D3D8A02FBF85F82D7D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam 14{/.notdef}rp /zero /one /two 13{/.notdef}rp /at 
/A /B /C /D /E 2{/.notdef}rp /H /I 
2{/.notdef}rp /L /.notdef /N /O /P /Q /.notdef 
/S /T /U 2{/.notdef}rp /X 7{/.notdef}rp /quoteleft /a 
14{/.notdef}rp /p /q 142{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
127.224 163.406 mo
(DC2)
[8.63387 7.63806 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 171.106 mo
(12)
[3.39009 0 ]xsh
152.254 171.106 mo
(22)
[3.39009 0 ]xsh
1.417 lw
161.734 174.096 mo
161.734 145.746 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 150.946 mo
(34)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/quotedblright <1C60D8A8C9B7A73DB6C04C97D13703FAAB4E35EE33AE49F9
FD9E5704663F4B067ECC5780E29C51EC8F3BEBF2AED5605F17B70D475B8BAD90
FA9E853076E91B0F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 34 /quotedblright put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright 13{/.notdef}rp /zero /one /two 13{/.notdef}rp 
/at /A /B /C /D /E 2{/.notdef}rp /H 
/I 2{/.notdef}rp /L /.notdef /N /O /P /Q 
/.notdef /S /T /U 2{/.notdef}rp /X 7{/.notdef}rp /quoteleft 
/a 14{/.notdef}rp /p /q 142{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
180.134 163.406 mo
(")sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 171.106 mo
(22)
[3.39009 0 ]xsh
199.024 171.106 mo
(42)
[3.39008 0 ]xsh
.709 lw
208.154 174.096 mo
208.154 145.746 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 150.946 mo
(50)
[3.39008 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
226.204 163.406 mo
(2)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 171.106 mo
(32)
[3.39008 0 ]xsh
245.084 171.106 mo
(62)
[3.39008 0 ]xsh
1.417 lw
254.564 174.096 mo
254.564 145.746 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 150.946 mo
(66)
[3.39008 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
271.974 163.406 mo
(B)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 171.106 mo
(42102)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
.709 lw
300.984 174.096 mo
300.984 145.746 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 150.946 mo
(82)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/R <1C60D8A8C9B678BD655A0EBDF954FA6285E833C3E93EC6D475732F74D513
D35373907A6EE14E6A4A3456FA2EC3188EA16F03B14334D43FD5802D2AE88D49
F9BF8FAF93FA929808E665C840167227705E4151522885F23CAD33ED4EB6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 82 /R put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright 13{/.notdef}rp /zero /one /two 13{/.notdef}rp 
/at /A /B /C /D /E 2{/.notdef}rp /H 
/I 2{/.notdef}rp /L /.notdef /N /O /P /Q 
/R /S /T /U 2{/.notdef}rp /X 7{/.notdef}rp /quoteleft 
/a 14{/.notdef}rp /p /q 142{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
318.164 163.406 mo
(R)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 171.106 mo
(52122)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
1.417 lw
347.404 174.096 mo
347.404 145.746 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 150.946 mo
(98)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/b <1C60D8A8C9B7B71A3BF37E5B04A973AE3537B88F4BB5ACBA455D3A1BA142
E785D79E5912718C1ECD461675A6637F556EED55CF8BDCCB299B9EDCC90CEEF7
848A29F57017AF6BC52E995EA1E7F82E72EE4F18C6AC102FDCEE023EA9B6FB5F
5177E2F233> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 98 /b put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright 13{/.notdef}rp /zero /one /two 13{/.notdef}rp 
/at /A /B /C /D /E 2{/.notdef}rp /H 
/I 2{/.notdef}rp /L /.notdef /N /O /P /Q 
/R /S /T /U 2{/.notdef}rp /X 7{/.notdef}rp /quoteleft 
/a /b 13{/.notdef}rp /p /q 142{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
365.704 163.406 mo
(b)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 171.106 mo
(62142)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
.709 lw
393.824 174.096 mo
393.824 145.746 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 150.946 mo
(114)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/r <1C60D8A8C9B817A008DC547B3215A264310155B0969BB1B60FD64874D034
6B37C03CD355AC26BD235A320AFF2436B7C3954D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 114 /r put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright 13{/.notdef}rp /zero /one /two 13{/.notdef}rp 
/at /A /B /C /D /E 2{/.notdef}rp /H 
/I 2{/.notdef}rp /L /.notdef /N /O /P /Q 
/R /S /T /U 2{/.notdef}rp /X 7{/.notdef}rp /quoteleft 
/a /b 13{/.notdef}rp /p /q /r 141{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
412.814 163.406 mo
(r)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 171.106 mo
(72162)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
1.417 lw
440.234 174.096 mo
440.234 145.746 li
@
.398 lw
.15369 174.296 mo
440.944 174.296 li
@
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
10.5837 190.916 mo
(0)sh
24.9777 190.916 mo
(011)
[14.4041 14.3971 0 ]xsh
1.417 lw
68.8937 202.836 mo
68.8937 174.496 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 179.696 mo
(3)sh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
80.6637 192.156 mo
(ETX)
[7.13951 8.13661 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 199.846 mo
(3)sh
109.574 199.846 mo
(3)sh
.709 lw
115.314 202.836 mo
115.314 174.496 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 179.696 mo
(19)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7A73D3B44BE7B3BE12688EE7DDA3A63BDA62EEDB076E2
123EB921A3297B68A71F5DF92E7CDAF71A150A947FFEC101C8C7F263DD77DC4F
7F72BCB13AC247B7F12687C9B4904765C9156BEE359166190CA1B2094BC32103
9EC0AE22422B378A1337A7F24F1131A027BF6934C63B5D4012127C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright 13{/.notdef}rp /zero /one /two /three 
12{/.notdef}rp /at /A /B /C /D /E 2{/.notdef}rp 
/H /I 2{/.notdef}rp /L /.notdef /N /O /P 
/Q /R /S /T /U 2{/.notdef}rp /X 7{/.notdef}rp 
/quoteleft /a /b 13{/.notdef}rp /p /q /r 141{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
127.224 192.156 mo
(DC3)
[8.63387 7.63806 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 199.846 mo
(13)
[3.39009 0 ]xsh
152.254 199.846 mo
(23)
[3.39009 0 ]xsh
1.417 lw
161.734 202.836 mo
161.734 174.496 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 179.696 mo
(35)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/numbersign <1C60D8A8C9B6B41CB76164536DFA9D652A249952C11F8C760B8
5FCB6DD747A65AE9FD23CD3D91A9E36409AC840550257F4F8C025DB7F6F2222A
44570C11042933BD29F4CB36A97317004DE03090367C1C07F7E3824317F664D3
81DCBDEBD503A3B3E3A0F904925518E7B7007FFBDF0E3943AD6E32F7C3A382A1
A2CC19463C4D054CFC93B94B79B6E18136EEEDC5312F4DF4D2C4A5A1F48B791E
AC7AECE5A4FE363A834FDB90279E986EEBEC34FCEFFF533DBFBF53E139E7E213
3406F37CE6C1F375DC08F8E4082D9ABF5B64498CC87249771DDA4C6A6BB7C6FC
E5C8C6D2E267C6D2D7E0AFCFC88460AAD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 35 /numbersign put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign 12{/.notdef}rp /zero /one /two 
/three 12{/.notdef}rp /at /A /B /C /D /E 
2{/.notdef}rp /H /I 2{/.notdef}rp /L /.notdef /N /O 
/P /Q /R /S /T /U 2{/.notdef}rp /X 
7{/.notdef}rp /quoteleft /a /b 13{/.notdef}rp /p /q /r 
141{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
178.144 191.986 mo
(#)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 199.846 mo
(23)
[3.39009 0 ]xsh
199.024 199.846 mo
(43)
[3.39008 0 ]xsh
.709 lw
208.154 202.836 mo
208.154 174.496 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 179.696 mo
(51)
[3.39008 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
226.204 192.156 mo
(3)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 199.846 mo
(33)
[3.39008 0 ]xsh
245.084 199.846 mo
(63)
[3.39008 0 ]xsh
1.417 lw
254.564 202.836 mo
254.564 174.496 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 179.696 mo
(67)
[3.39008 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
272.144 192.156 mo
(C)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 199.846 mo
(43103)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
.709 lw
300.984 202.836 mo
300.984 174.496 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 179.696 mo
(83)
[3.39008 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
318.704 192.156 mo
(S)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 199.846 mo
(53123)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
1.417 lw
347.404 202.836 mo
347.404 174.496 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 179.696 mo
(99)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/c <1C60D8A8C9B77FE2B9E40961AA02E170F61AAE6CC3961BE60F9FF3CBB3E7
5A3038EEBE2210030E1BA154EE377D70D401D3D9DADAF0C074F3739E80005B39
FCE07388F6A715CB8661C2F0DF475705AC441A31> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 99 /c put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign 12{/.notdef}rp /zero /one /two 
/three 12{/.notdef}rp /at /A /B /C /D /E 
2{/.notdef}rp /H /I 2{/.notdef}rp /L /.notdef /N /O 
/P /Q /R /S /T /U 2{/.notdef}rp /X 
7{/.notdef}rp /quoteleft /a /b /c 12{/.notdef}rp /p /q 
/r 141{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
366.134 192.156 mo
(c)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 199.846 mo
(63143)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
.709 lw
393.824 202.836 mo
393.824 174.496 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 179.696 mo
(115)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/s <1C60D8A8C9B73CE4EDA402BCF9D339BDBCE98B96DA76C29318F6633EF72E
BA302E6A0588BC011E13DEE5BE1C1EDFB2B6930FF58DCB22074D0F2327B5C314
95B5F6E965253DE5A09ECBF6A4E73E792570AE2EF66E1C108C27A9930A01B508
1226079ADE164A7914BB3F67EAD98219DDB1DD925E31EB5E0F77FA0B44435ECD
12283D9A977C35> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 115 /s put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign 12{/.notdef}rp /zero /one /two 
/three 12{/.notdef}rp /at /A /B /C /D /E 
2{/.notdef}rp /H /I 2{/.notdef}rp /L /.notdef /N /O 
/P /Q /R /S /T /U 2{/.notdef}rp /X 
7{/.notdef}rp /quoteleft /a /b /c 12{/.notdef}rp /p /q 
/r /s 140{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
412.564 192.156 mo
(s)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 199.846 mo
(73163)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
1.417 lw
440.234 202.836 mo
440.234 174.496 li
@
.398 lw
.15369 203.036 mo
440.944 203.036 li
@
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
10.5837 219.656 mo
(0)sh
24.9777 219.656 mo
(100)
[14.4041 14.3971 0 ]xsh
1.417 lw
68.8937 231.586 mo
68.8937 203.236 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 208.436 mo
(4)sh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
80.2437 220.896 mo
(EOT)
[7.13951 8.80006 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 228.596 mo
(4)sh
109.574 228.596 mo
(4)sh
.709 lw
115.314 231.586 mo
115.314 203.236 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 208.436 mo
(20)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7A73DC573E0FDE3AD73FEE82F9F14DB3F0AB3BE38D56A8
122A7A5F8B6ED2296ABF48856509B4E6DEF566772A914D1A13C3C012A3EDA96B
E7B991608A6C22F61F497C6E362> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign 12{/.notdef}rp /zero /one /two 
/three /four 11{/.notdef}rp /at /A /B /C /D 
/E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /.notdef /N 
/O /P /Q /R /S /T /U 2{/.notdef}rp 
/X 7{/.notdef}rp /quoteleft /a /b /c 12{/.notdef}rp /p 
/q /r /s 140{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
127.224 220.896 mo
(DC4)
[8.63387 7.63806 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 228.596 mo
(14)
[3.39009 0 ]xsh
152.254 228.596 mo
(24)
[3.39009 0 ]xsh
1.417 lw
161.734 231.586 mo
161.734 203.236 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 208.436 mo
(36)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/dollar <1C60D8A8C9B7A73D1DFB3775EF119E11338E2125BB692FB97C3D67A
36ED79ABC0640CC5F26C316BB4004758E7DEC886F5D4B808E9F6C26A9A50E13D
26F69BC42FA0AC944850DE9A75B79705A163B55B77B150A523A5A3EA4894FFA4
FA9A2F99EC1C121F31086FE8A3FE5B206EC634C932D2B917A767C19B5685531E
CD51200565328B6B7730B4A754C30EA1BD6C4EFB650F212534C04F364EF02CDF
58B96> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 36 /dollar put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar 11{/.notdef}rp /zero /one 
/two /three /four 11{/.notdef}rp /at /A /B /C 
/D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /.notdef 
/N /O /P /Q /R /S /T /U 
2{/.notdef}rp /X 7{/.notdef}rp /quoteleft /a /b /c 12{/.notdef}rp 
/p /q /r /s 140{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
180.134 220.896 mo
($)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 228.596 mo
(24)
[3.39009 0 ]xsh
199.024 228.596 mo
(44)
[3.39008 0 ]xsh
.709 lw
208.154 231.586 mo
208.154 203.236 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 208.436 mo
(52)
[3.39008 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
226.204 220.896 mo
(4)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 228.596 mo
(34)
[3.39008 0 ]xsh
245.084 228.596 mo
(64)
[3.39008 0 ]xsh
1.417 lw
254.564 231.586 mo
254.564 203.236 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 208.436 mo
(68)
[3.39008 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
271.644 220.896 mo
(D)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 228.596 mo
(44104)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
.709 lw
300.984 231.586 mo
300.984 203.236 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 208.436 mo
(84)
[3.39008 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
317.954 220.896 mo
(T)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 228.596 mo
(54124)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
1.417 lw
347.404 231.586 mo
347.404 203.236 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 208.436 mo
(100)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/d <1C60D8A8C9B7B71A3BF37E5B04A973AE3537B8FD890ED1FF113FAC34199C
B3FA207ED3D23CC2CC9C5CB25E5E02673E4D32655006A2D7DA8B4DC31B0942F2
8555386ADB48AAFB9FE36384F0A54ED1C3D0C1FB9588114D50DC91A1BB175153
E01C3EE813698E4A73B8C5B6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 100 /d put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar 11{/.notdef}rp /zero /one 
/two /three /four 11{/.notdef}rp /at /A /B /C 
/D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /.notdef 
/N /O /P /Q /R /S /T /U 
2{/.notdef}rp /X 7{/.notdef}rp /quoteleft /a /b /c /d 
11{/.notdef}rp /p /q /r /s 140{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
365.704 220.896 mo
(d)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 228.596 mo
(64144)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
.709 lw
393.824 231.586 mo
393.824 203.236 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 208.436 mo
(116)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/t <1C60D8A8C9B80380266AFC360D96B3E4FF725B87623028777809C7C9C138
5B9639133B74D4A6809B9D78A2A8D9ECC86A9BF71B38364538F7DF219195B8E6
4502B3E1197E77B4C5432EFDF0E419AF85F76B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 116 /t put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar 11{/.notdef}rp /zero /one 
/two /three /four 11{/.notdef}rp /at /A /B /C 
/D /E 2{/.notdef}rp /H /I 2{/.notdef}rp /L /.notdef 
/N /O /P /Q /R /S /T /U 
2{/.notdef}rp /X 7{/.notdef}rp /quoteleft /a /b /c /d 
11{/.notdef}rp /p /q /r /s /t 139{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
412.704 220.896 mo
(t)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 228.596 mo
(74164)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
1.417 lw
440.234 231.586 mo
440.234 203.236 li
@
.398 lw
.15369 231.786 mo
440.944 231.786 li
@
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
10.5837 248.406 mo
(0)sh
24.9777 248.406 mo
(101)
[14.4041 14.3971 0 ]xsh
1.417 lw
68.8937 260.326 mo
68.8937 231.976 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 237.186 mo
(5)sh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
80.0737 249.646 mo
(ENQ)
[7.13951 8.4677 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 257.336 mo
(5)sh
109.574 257.336 mo
(5)sh
.709 lw
115.314 260.326 mo
115.314 231.976 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 237.186 mo
(21)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/K <1C60D8A8C9B62B94E6A2FD8BA78A92A59437EE148B0F1F69BA84983C02E3
9734E9ECC517BADE68603335FD538D99ACD8AB2C8BF2EE5CE443A63361FAD433> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 75 /K put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar 11{/.notdef}rp /zero /one 
/two /three /four 11{/.notdef}rp /at /A /B /C 
/D /E 2{/.notdef}rp /H /I /.notdef /K /L 
/.notdef /N /O /P /Q /R /S /T 
/U 2{/.notdef}rp /X 7{/.notdef}rp /quoteleft /a /b /c 
/d 11{/.notdef}rp /p /q /r /s /t 139{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
125.974 249.646 mo
(NAK)
[8.46769 7.97043 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 257.336 mo
(15)
[3.39009 0 ]xsh
152.254 257.336 mo
(25)
[3.39009 0 ]xsh
1.417 lw
161.734 260.326 mo
161.734 231.976 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 237.186 mo
(37)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/percent <1C60D8A8C9B6B41C1F6F61BA0A66C96DCC6D650447DA1A189C61EA
913A1B9FF8302490B3F146B755D5C9953EDBC013D9B4815D4F64153EC7C7DCFB
0644B23E1D72F5A97721BCEC3EEB47303D631B2C09F6A53F5AAE3C3B7785682C
14F1415ED22C3F1ED7F28A160531CBB543FC20BB55E821526274995EE4A82A48
72D9F4337E8FFD0D7FCF21D780496DCD66BCD506E9AD83306E00E0717B889452
61D1E42015A12777AF55B782C70DBF3BBB86B4008E5A801538E1A71B258F456B
1ECAD2BF6D82B8866CC23DC84583> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 37 /percent put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent 10{/.notdef}rp /zero 
/one /two /three /four 11{/.notdef}rp /at /A /B 
/C /D /E 2{/.notdef}rp /H /I /.notdef /K 
/L /.notdef /N /O /P /Q /R /S 
/T /U 2{/.notdef}rp /X 7{/.notdef}rp /quoteleft /a /b 
/c /d 11{/.notdef}rp /p /q /r /s /t 
139{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
178.144 249.646 mo
(%)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 257.336 mo
(25)
[3.39009 0 ]xsh
199.024 257.336 mo
(45)
[3.39008 0 ]xsh
.709 lw
208.154 260.326 mo
208.154 231.976 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 237.186 mo
(53)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five <1C60D8A8C9B7A73D3B44BE743C0D26AD679F5F93FC6E985F4FDB089B8
726C660FA9B5F57D310BE08C36ED05112B17AD96AEB48FF2FC2898E2D336EBE9
EAD56A8D07216507E5146B1B78A220C1E81864951416BE98FD5933A8730B6A85
BD795303C655D884BCE53> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 53 /five put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent 10{/.notdef}rp /zero 
/one /two /three /four /five 10{/.notdef}rp /at /A 
/B /C /D /E 2{/.notdef}rp /H /I /.notdef 
/K /L /.notdef /N /O /P /Q /R 
/S /T /U 2{/.notdef}rp /X 7{/.notdef}rp /quoteleft /a 
/b /c /d 11{/.notdef}rp /p /q /r /s 
/t 139{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
226.204 249.646 mo
(5)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 257.336 mo
(35)
[3.39008 0 ]xsh
245.084 257.336 mo
(65)
[3.39008 0 ]xsh
1.417 lw
254.564 260.326 mo
254.564 231.976 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 237.186 mo
(69)
[3.39008 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
272.394 249.646 mo
(E)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 257.336 mo
(45105)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
.709 lw
300.984 260.326 mo
300.984 231.976 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 237.186 mo
(85)
[3.39008 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
317.914 249.646 mo
(U)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 257.336 mo
(55125)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
1.417 lw
347.404 260.326 mo
347.404 231.976 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 237.186 mo
(101)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/e <1C60D8A8C9B77FE2B9E77589C8F628AF22F51C7F32A727D1F43317BBADAF
EB9669D8F008F2C4DD8C43A1C2232E39B24E3D22FF160310DAF2ABD5B3E860FE
806DDBF18203F1B306BAB7855DEE1ACB6651BB78FF7B6B2A7647C77F2B3BE1EC
712E42C50E6C4B9A2D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 101 /e put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent 10{/.notdef}rp /zero 
/one /two /three /four /five 10{/.notdef}rp /at /A 
/B /C /D /E 2{/.notdef}rp /H /I /.notdef 
/K /L /.notdef /N /O /P /Q /R 
/S /T /U 2{/.notdef}rp /X 7{/.notdef}rp /quoteleft /a 
/b /c /d /e 10{/.notdef}rp /p /q /r 
/s /t 139{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
366.134 249.646 mo
(e)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 257.336 mo
(65145)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
.709 lw
393.824 260.326 mo
393.824 231.976 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 237.186 mo
(117)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/u <1C60D8A8C9B7B71A3BF95737C599C0E717D5B5C7D72F34B1F811DCAC95CB
5974B6C0C78A24B333E73A4FF0275ABA7752A8B315606E0D8491629D5FEE55BD
B85978B57067> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 117 /u put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent 10{/.notdef}rp /zero 
/one /two /three /four /five 10{/.notdef}rp /at /A 
/B /C /D /E 2{/.notdef}rp /H /I /.notdef 
/K /L /.notdef /N /O /P /Q /R 
/S /T /U 2{/.notdef}rp /X 7{/.notdef}rp /quoteleft /a 
/b /c /d /e 10{/.notdef}rp /p /q /r 
/s /t /u 138{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
411.774 249.646 mo
(u)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 257.336 mo
(75165)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
1.417 lw
440.234 260.326 mo
440.234 231.976 li
@
.398 lw
.15369 260.526 mo
440.944 260.526 li
@
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
10.5837 277.146 mo
(0)sh
24.9777 277.146 mo
(110)
[14.4041 14.3971 0 ]xsh
1.417 lw
68.8937 289.076 mo
68.8937 260.726 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 265.926 mo
(6)sh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
80.4937 278.386 mo
(A)sh
88.1447 278.386 mo
(CK)
[7.63806 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 286.086 mo
(6)sh
109.574 286.086 mo
(6)sh
.709 lw
115.314 289.076 mo
115.314 260.726 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 265.926 mo
(22)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Y <1C60D8A8C9B64FADC672C71728CEEE6B7E7F1C2517E42F518A61A6616A44
AABB10FC155C0C61AABBCA95B2A5B4EE6F51991C6E74C5AEB2043CF0B6A43B3A
AA26B33A0997FC7E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 89 /Y put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent 10{/.notdef}rp /zero 
/one /two /three /four /five 10{/.notdef}rp /at /A 
/B /C /D /E 2{/.notdef}rp /H /I /.notdef 
/K /L /.notdef /N /O /P /Q /R 
/S /T /U 2{/.notdef}rp /X /Y 6{/.notdef}rp /quoteleft 
/a /b /c /d /e 10{/.notdef}rp /p /q 
/r /s /t /u 138{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
126.804 278.386 mo
(SYN)
[6.64222 7.97043 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 286.086 mo
(16)
[3.39009 0 ]xsh
152.254 286.086 mo
(26)
[3.39009 0 ]xsh
1.417 lw
161.734 289.076 mo
161.734 260.726 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 265.926 mo
(38)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/ampersand <1C60D8A8C9B6EB66516E92299BCE5E02041F3A89F05CDF00F212
793BEEC7C406E9E1A51E46D59BA648592239170C22424BB425AEE8F57D096B70
DAB99E0ADD0106CCE131A6671626541DD73E307FAA3F8F2630398AD37F6610BF
D728BEB5D88EAC9B3A6F81644DE7B98A80BEE98BDDE0D8308EB785DDEFB906D7
9EF9851940D82DEBE75BE3C10D3A6AB4C3026295677970799FE58A5DECD66B67
12D998DF523318EFA49A74FFC4D2EABD2EF51CCB5E1AEE91E346E4B2D173D39D
144C37C7CEDE4CE6FD561D6D4BAF8F9FFCE8FE66348D2394F988A8B825A4DCBE
072BC3FF3A143F9C4311F80528> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 38 /ampersand put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand 9{/.notdef}rp 
/zero /one /two /three /four /five 10{/.notdef}rp /at 
/A /B /C /D /E 2{/.notdef}rp /H /I 
/.notdef /K /L /.notdef /N /O /P /Q 
/R /S /T /U 2{/.notdef}rp /X /Y 6{/.notdef}rp 
/quoteleft /a /b /c /d /e 10{/.notdef}rp /p 
/q /r /s /t /u 138{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
178.594 278.386 mo
(&)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 286.086 mo
(26)
[3.39009 0 ]xsh
199.024 286.086 mo
(46)
[3.39008 0 ]xsh
.709 lw
208.154 289.076 mo
208.154 260.726 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 265.926 mo
(54)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/six <1C60D8A8C9B7A73D3B44BE741BE130889A29A62362BBF3BD4998A9716D
017BD3E90015A944479F79C367805DC4C50DB057D8E0A451E77FA8FEED04690F
091D41623ACB39AB5DC1AF72765D755468DC2818F70C26AC9F213B1838D66ABE
CDDED3650E39182CCE464B3439BDD0888E3B029C3E54D01F55FD3262BD39E2B7
7913583D31FCB75B5E307697CF4A1695AF9EFBD77C943134485F13A1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand 9{/.notdef}rp 
/zero /one /two /three /four /five /six 9{/.notdef}rp 
/at /A /B /C /D /E 2{/.notdef}rp /H 
/I /.notdef /K /L /.notdef /N /O /P 
/Q /R /S /T /U 2{/.notdef}rp /X /Y 
6{/.notdef}rp /quoteleft /a /b /c /d /e 10{/.notdef}rp 
/p /q /r /s /t /u 138{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
226.204 278.386 mo
(6)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 286.086 mo
(36)
[3.39008 0 ]xsh
245.084 286.086 mo
(66)
[3.39008 0 ]xsh
1.417 lw
254.564 289.076 mo
254.564 260.726 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 265.926 mo
(70)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/F <1C60D8A8C9B7E2CE5B6DC687603738C1696180BE77423479330DD2770ED8
074FF84D7D7960EEDC84A05F08AA4BDC84F4EA7449CA828FD8BFAE9F0249313A
C8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 70 /F put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand 9{/.notdef}rp 
/zero /one /two /three /four /five /six 9{/.notdef}rp 
/at /A /B /C /D /E /F /.notdef 
/H /I /.notdef /K /L /.notdef /N /O 
/P /Q /R /S /T /U 2{/.notdef}rp /X 
/Y 6{/.notdef}rp /quoteleft /a /b /c /d /e 
10{/.notdef}rp /p /q /r /s /t /u 138{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
272.554 278.386 mo
(F)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 286.086 mo
(46106)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
.709 lw
300.984 289.076 mo
300.984 260.726 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 265.926 mo
(86)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/V <1C60D8A8C9B64FADC672C71728CEEE05718E3347F8426FFEA2A0A052BE0E
1CA00CB1F71C8B9C3A3A3D913E18832DB4FC75D6CFFD137AE6C7855883E99E65
D5FF9D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 86 /V put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand 9{/.notdef}rp 
/zero /one /two /three /four /five /six 9{/.notdef}rp 
/at /A /B /C /D /E /F /.notdef 
/H /I /.notdef /K /L /.notdef /N /O 
/P /Q /R /S /T /U /V /.notdef 
/X /Y 6{/.notdef}rp /quoteleft /a /b /c /d 
/e 10{/.notdef}rp /p /q /r /s /t /u 
138{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
318.034 278.386 mo
(V)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 286.086 mo
(56126)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
1.417 lw
347.404 289.076 mo
347.404 260.726 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 265.926 mo
(102)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/f <1C60D8A8C9B83BB81FAB40A380ACBC582D7CA450BD05C369BCE33A2F26C0
CAD5D7823E61BE9D14728C338805A7B2EE9841022598360F755830541EBE5566
C0713CF2C900B552629FEC3F7AFE0740BD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 102 /f put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand 9{/.notdef}rp 
/zero /one /two /three /four /five /six 9{/.notdef}rp 
/at /A /B /C /D /E /F /.notdef 
/H /I /.notdef /K /L /.notdef /N /O 
/P /Q /R /S /T /U /V /.notdef 
/X /Y 6{/.notdef}rp /quoteleft /a /b /c /d 
/e /f 9{/.notdef}rp /p /q /r /s /t 
/u 138{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
366.974 278.386 mo
(f)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 286.086 mo
(66146)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
.709 lw
393.824 289.076 mo
393.824 260.726 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 265.926 mo
(118)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/v <1C60D8A8C9B74E612D7E6F3CEC995C19CD460D76D9FB42D9BBD9DD073B25
8B8C7EF6DECACD3110660062F29A6CD4B9A73D45CEF0C7966BA13E7989A7A7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 118 /v put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand 9{/.notdef}rp 
/zero /one /two /three /four /five /six 9{/.notdef}rp 
/at /A /B /C /D /E /F /.notdef 
/H /I /.notdef /K /L /.notdef /N /O 
/P /Q /R /S /T /U /V /.notdef 
/X /Y 6{/.notdef}rp /quoteleft /a /b /c /d 
/e /f 9{/.notdef}rp /p /q /r /s /t 
/u /v 137{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
412.104 278.386 mo
(v)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 286.086 mo
(76166)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
1.417 lw
440.234 289.076 mo
440.234 260.726 li
@
.398 lw
.15369 289.276 mo
440.944 289.276 li
@
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
10.5837 305.896 mo
(0)sh
24.9777 305.896 mo
(111)
[14.4041 14.3971 0 ]xsh
1.417 lw
68.8937 317.816 mo
68.8937 289.466 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 294.676 mo
(7)sh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
81.4937 307.126 mo
(BEL)
[7.97043 7.13951 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 314.826 mo
(7)sh
109.574 314.826 mo
(7)sh
.709 lw
115.314 317.816 mo
115.314 289.466 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 294.676 mo
(23)
[3.39009 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
126.724 307.126 mo
(ETB)
[7.1395 8.13661 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 314.826 mo
(17)
[3.39009 0 ]xsh
152.254 314.826 mo
(27)
[3.39009 0 ]xsh
1.417 lw
161.734 317.816 mo
161.734 289.466 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 294.676 mo
(39)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/quoteright <1C60D8A8C9B85744173E4D8478C4FB46B9383AECBA2D1CF05D9
685AD935D02DEC9FB2D8860919F2B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 39 /quoteright put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
8{/.notdef}rp /zero /one /two /three /four /five /six 
9{/.notdef}rp /at /A /B /C /D /E /F 
/.notdef /H /I /.notdef /K /L /.notdef /N 
/O /P /Q /R /S /T /U /V 
/.notdef /X /Y 6{/.notdef}rp /quoteleft /a /b /c 
/d /e /f 9{/.notdef}rp /p /q /r /s 
/t /u /v 137{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
181.464 307.126 mo
(')sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 314.826 mo
(27)
[3.39009 0 ]xsh
199.024 314.826 mo
(47)
[3.39008 0 ]xsh
.709 lw
208.154 317.816 mo
208.154 289.466 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 294.676 mo
(55)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/seven <1C60D8A8C9B7A73DCEB4B8D8151BC703373BFCD69C4860CC4C7CAE72
9374255A2E8C2B8FAA8C7B26E64DC33CC7622B931E7B81B45CC2D2EFD48720AF
B6F62F4A1DF9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 55 /seven put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
8{/.notdef}rp /zero /one /two /three /four /five /six 
/seven 8{/.notdef}rp /at /A /B /C /D /E 
/F /.notdef /H /I /.notdef /K /L /.notdef 
/N /O /P /Q /R /S /T /U 
/V /.notdef /X /Y 6{/.notdef}rp /quoteleft /a /b 
/c /d /e /f 9{/.notdef}rp /p /q /r 
/s /t /u /v 137{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
226.204 307.126 mo
(7)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 314.826 mo
(37)
[3.39008 0 ]xsh
245.084 314.826 mo
(67)
[3.39008 0 ]xsh
1.417 lw
254.564 317.816 mo
254.564 289.466 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 294.676 mo
(71)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/G <1C60D8A8C9B64EDF837CC81DF0923E124FDAA3732A4D15944AAEF9AF3D18
741702ED1A22434C84910E71BB0DF219BA65544C92FC77C5586FC59500954304
D5708DD10A9110D4E8C5381FE13685739D6C12D510CE648A9AC6CF4AE406AF9B
1CDEC0191BF075D09FE76C2EA27BEA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 71 /G put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
8{/.notdef}rp /zero /one /two /three /four /five /six 
/seven 8{/.notdef}rp /at /A /B /C /D /E 
/F /G /H /I /.notdef /K /L /.notdef 
/N /O /P /Q /R /S /T /U 
/V /.notdef /X /Y 6{/.notdef}rp /quoteleft /a /b 
/c /d /e /f 9{/.notdef}rp /p /q /r 
/s /t /u /v 137{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
271.974 307.126 mo
(G)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 314.826 mo
(47107)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
.709 lw
300.984 317.816 mo
300.984 289.466 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 294.676 mo
(87)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/W <1C60D8A8C9B5D6EF3EDB4BF0D22A0D4486566252963ABF5A2B56C8B1BFFE
CE0C36586951FF58884B980701CF1A8E52E4DBA931254CABBF03121A8C1A97FF
4047F82B58BC0E7F922E36A8DD75BC95B93EA09472C6442EA20600B32DB0FEF7
96D2C02C6C8BE12ACF1BF8617C5650733DCDF12D65CC88EE6F90696B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 87 /W put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
8{/.notdef}rp /zero /one /two /three /four /five /six 
/seven 8{/.notdef}rp /at /A /B /C /D /E 
/F /G /H /I /.notdef /K /L /.notdef 
/N /O /P /Q /R /S /T /U 
/V /W /X /Y 6{/.notdef}rp /quoteleft /a /b 
/c /d /e /f 9{/.notdef}rp /p /q /r 
/s /t /u /v 137{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
316.374 307.126 mo
(W)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 314.826 mo
(57127)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
1.417 lw
347.404 317.816 mo
347.404 289.466 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 294.676 mo
(103)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g <1C60D8A8C9B7A73DB58EC4F5735257CF6484034BE48838869C792E77FEDB
2EDDDF87A4ECEA55DED30419BE80B9800A7A7BCC852BBF2F2E06BC58F5220971
E571F38CF807ABB277789A55600204E7D4F9D5B79E85F55DBE49717A60C2DBDE
EFC117FFEA09FDB25E08EC0D2C46945DC382E7BB216BC1ED46A53D7DCC40B2C9
9BE8374E106F137F672ABF5E8DC549748A999EC7C6BF9EB4A8ACFE131064AD2B
C89A39B533BAC508010480088F92C9E199DE77B0D5D956B2F9890F91DB699D5B
FE37A68F78A04CA9D3C85DA607FEC9886BB4D6> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 103 /g put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
8{/.notdef}rp /zero /one /two /three /four /five /six 
/seven 8{/.notdef}rp /at /A /B /C /D /E 
/F /G /H /I /.notdef /K /L /.notdef 
/N /O /P /Q /R /S /T /U 
/V /W /X /Y 6{/.notdef}rp /quoteleft /a /b 
/c /d /e /f /g 8{/.notdef}rp /p /q 
/r /s /t /u /v 137{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
365.804 306.966 mo
(g)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 314.826 mo
(67147)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
.709 lw
393.824 317.816 mo
393.824 289.466 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 294.676 mo
(119)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/w <1C60D8A8C9B65EB475E9FA2C49B5118A2A658D2CC578E152C42CB9991CCC
398A8F2686CA23EE5EF5D4538206CA17D57FFF37A7D4AF33C30D2595D71EC222
815135034461FA7153D5C0EE627B51D4FC707858F2F0887C41E377892DC58E5D
2482A53295ACC9A4C05F5F703A04ECACDB3194191CF1469BAB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 119 /w put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
8{/.notdef}rp /zero /one /two /three /four /five /six 
/seven 8{/.notdef}rp /at /A /B /C /D /E 
/F /G /H /I /.notdef /K /L /.notdef 
/N /O /P /Q /R /S /T /U 
/V /W /X /Y 6{/.notdef}rp /quoteleft /a /b 
/c /d /e /f /g 8{/.notdef}rp /p /q 
/r /s /t /u /v /w 136{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
410.774 307.126 mo
(w)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 314.826 mo
(77167)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
1.417 lw
440.234 317.816 mo
440.234 289.466 li
@
.398 lw
.15369 318.016 mo
440.944 318.016 li
@
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
10.5837 334.636 mo
(1)sh
24.9777 334.636 mo
(000)
[14.4041 14.3971 0 ]xsh
1.417 lw
68.8937 346.566 mo
68.8937 318.216 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 323.416 mo
(8)sh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
82.9837 335.876 mo
(BS)
[7.97043 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 343.576 mo
(8)sh
106.184 343.576 mo
(10)
[3.39009 0 ]xsh
.709 lw
115.314 346.566 mo
115.314 318.216 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 323.416 mo
(24)
[3.39009 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
126.304 335.876 mo
(CAN)
[7.63805 7.97043 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 343.576 mo
(18)
[3.39009 0 ]xsh
152.254 343.576 mo
(30)
[3.39009 0 ]xsh
1.417 lw
161.734 346.566 mo
161.734 318.216 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 323.416 mo
(40)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B737EC27E43BF1977FE17ADFD232FE85F5EFD5C586
2A0BCB221BD72F5DFF64E9FED5D9544D67B5EC2A6104879FF77CB542587AF349
2ABB2D617A82C5D7037237C93E3E4BAD01841748B3C8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 40 /parenleft put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft 7{/.notdef}rp /zero /one /two /three /four /five 
/six /seven 8{/.notdef}rp /at /A /B /C /D 
/E /F /G /H /I /.notdef /K /L 
/.notdef /N /O /P /Q /R /S /T 
/U /V /W /X /Y 6{/.notdef}rp /quoteleft /a 
/b /c /d /e /f /g 8{/.notdef}rp /p 
/q /r /s /t /u /v /w 136{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
180.804 335.376 mo
(\()sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 343.576 mo
(28)
[3.39009 0 ]xsh
199.024 343.576 mo
(50)
[3.39008 0 ]xsh
.709 lw
208.154 346.566 mo
208.154 318.216 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 323.416 mo
(56)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/eight <1C60D8A8C9B7A73D3B44BE7B3BE7FFF019E7EA34A15DED5B2D465B7A
EF0670A9A82FD7960ADCB9AC66DFEEF0861C850B47C18C8FDA29F7110651E34D
B968A252461EC8952242A73E5EB97F44A6426892D458558FFACEEDFD9EE7CEFC
F2EBA0F87B093BA3F7C5A1995F8226596B2F5C1F5B66D610213976210B72F90B
CCC0A2F9F74525CA504F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 56 /eight put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft 7{/.notdef}rp /zero /one /two /three /four /five 
/six /seven /eight 7{/.notdef}rp /at /A /B /C 
/D /E /F /G /H /I /.notdef /K 
/L /.notdef /N /O /P /Q /R /S 
/T /U /V /W /X /Y 6{/.notdef}rp /quoteleft 
/a /b /c /d /e /f /g 8{/.notdef}rp 
/p /q /r /s /t /u /v /w 
136{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
226.204 335.876 mo
(8)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 343.576 mo
(38)
[3.39008 0 ]xsh
245.084 343.576 mo
(70)
[3.39008 0 ]xsh
1.417 lw
254.564 346.566 mo
254.564 318.216 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 323.416 mo
(72)
[3.39008 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
271.724 335.876 mo
(H)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 343.576 mo
(48110)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
.709 lw
300.984 346.566 mo
300.984 318.216 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 323.416 mo
(88)
[3.39008 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
318.034 335.876 mo
(X)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 343.576 mo
(58130)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
1.417 lw
347.404 346.566 mo
347.404 318.216 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 323.416 mo
(104)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/h <1C60D8A8C9B7B71A30FC1EF5126029AC82AD0F5638FC77768CB440AC44A9
F7323CCF5763A7605C34A37C334D36640791A903B79A7C0E39BB6765513D3ED6
412AA57D334F185CFAF3A401> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 104 /h put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft 7{/.notdef}rp /zero /one /two /three /four /five 
/six /seven /eight 7{/.notdef}rp /at /A /B /C 
/D /E /F /G /H /I /.notdef /K 
/L /.notdef /N /O /P /Q /R /S 
/T /U /V /W /X /Y 6{/.notdef}rp /quoteleft 
/a /b /c /d /e /f /g /h 
7{/.notdef}rp /p /q /r /s /t /u /v 
/w 136{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
365.704 335.876 mo
(h)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 343.576 mo
(68150)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
.709 lw
393.824 346.566 mo
393.824 318.216 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 323.416 mo
(120)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/x <1C60D8A8C9B74E612D7E6F3CEC995C0B13F5AB82273722ADAA0417B9837C
6E5170FACDBFA78B0E3C735E3C2946D99B99249CDA75825FA2AF582794ED6409
566DFBF2A85FB1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 120 /x put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft 7{/.notdef}rp /zero /one /two /three /four /five 
/six /seven /eight 7{/.notdef}rp /at /A /B /C 
/D /E /F /G /H /I /.notdef /K 
/L /.notdef /N /O /P /Q /R /S 
/T /U /V /W /X /Y 6{/.notdef}rp /quoteleft 
/a /b /c /d /e /f /g /h 
7{/.notdef}rp /p /q /r /s /t /u /v 
/w /x 135{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
412.104 335.876 mo
(x)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 343.576 mo
(78170)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
1.417 lw
440.234 346.566 mo
440.234 318.216 li
@
.398 lw
.15369 346.766 mo
440.944 346.766 li
@
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
10.5837 363.386 mo
(1)sh
24.9777 363.386 mo
(001)
[14.4041 14.3971 0 ]xsh
1.417 lw
68.8937 375.306 mo
68.8937 346.956 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 352.166 mo
(9)sh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
81.9837 364.616 mo
(HT)
[8.4677 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 372.316 mo
(9)sh
106.184 372.316 mo
(11)
[3.39009 0 ]xsh
.709 lw
115.314 375.306 mo
115.314 346.956 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 352.166 mo
(25)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/M <1C60D8A8C9B69E59BC73D93FC5A356A227E17EA9C31EFFA71275C6B5EB76
9923CE4FA51C8A1EAEED0428CE577507A9116D4E93C97EF19E9F9C7938C83656
342A6195D2BADF02DD8FE47428F019C292D90E07E4319371C83FC96B01EBE161
D7AEA1A5C028EB3560F099A0C07EAACAE48658B786> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 77 /M put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft 7{/.notdef}rp /zero /one /two /three /four /five 
/six /seven /eight 7{/.notdef}rp /at /A /B /C 
/D /E /F /G /H /I /.notdef /K 
/L /M /N /O /P /Q /R /S 
/T /U /V /W /X /Y 6{/.notdef}rp /quoteleft 
/a /b /c /d /e /f /g /h 
7{/.notdef}rp /p /q /r /s /t /u /v 
/w /x 135{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
127.554 364.616 mo
(EM)
[7.1395 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 372.316 mo
(19)
[3.39009 0 ]xsh
152.254 372.316 mo
(31)
[3.39009 0 ]xsh
1.417 lw
161.734 375.306 mo
161.734 346.956 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 352.166 mo
(41)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenright <1C60D8A8C9B737EC27E43BF1977FE17AF2262CF64EF962DFDAC
02AB55D2052756AA63120FAA4DF07747C062A66782FCA254E0720B3E8AC47FE4
D121674CB18260D9B55604C1C9BF203D4A1C3D9A16AD59F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 41 /parenright put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four 
/five /six /seven /eight 7{/.notdef}rp /at /A /B 
/C /D /E /F /G /H /I /.notdef 
/K /L /M /N /O /P /Q /R 
/S /T /U /V /W /X /Y 6{/.notdef}rp 
/quoteleft /a /b /c /d /e /f /g 
/h 7{/.notdef}rp /p /q /r /s /t /u 
/v /w /x 135{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
180.804 364.126 mo
(\))sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 372.316 mo
(29)
[3.39009 0 ]xsh
199.024 372.316 mo
(51)
[3.39008 0 ]xsh
.709 lw
208.154 375.306 mo
208.154 346.956 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 352.166 mo
(57)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/nine <1C60D8A8C9B7A73D3B44BE7BB547913A9BDE169CF47BDFB08AECD5607
99E5BC8494BE235E9ADCC03CB80F5292113DF6968D1EA7A40F55C5B9F80DEC1E
C90EFB1C279B74EA768317A0E0EF74EDF4617CB23F4C910337B8288987BD48E8
3A5C57153D99C537E1535151D97A04BE59B429AB8384BD475BB1798042991B18
A318E879D6A9C6C64FA96744223F01926110C9D549A9098592C1B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 57 /nine put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four 
/five /six /seven /eight /nine 6{/.notdef}rp /at /A 
/B /C /D /E /F /G /H /I 
/.notdef /K /L /M /N /O /P /Q 
/R /S /T /U /V /W /X /Y 
6{/.notdef}rp /quoteleft /a /b /c /d /e /f 
/g /h 7{/.notdef}rp /p /q /r /s /t 
/u /v /w /x 135{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
226.204 364.616 mo
(9)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 372.316 mo
(39)
[3.39008 0 ]xsh
245.084 372.316 mo
(71)
[3.39008 0 ]xsh
1.417 lw
254.564 375.306 mo
254.564 346.956 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 352.166 mo
(73)
[3.39008 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
274.304 364.616 mo
(I)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 372.316 mo
(49111)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
.709 lw
300.984 375.306 mo
300.984 346.956 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 352.166 mo
(89)
[3.39008 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
318.034 364.616 mo
(Y)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 372.316 mo
(59131)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
1.417 lw
347.404 375.306 mo
347.404 346.956 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 352.166 mo
(105)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/i <1C60D8A8C9B87C1336DBF919C5FF7B37BC20E0BD50ABEEF75988341A6E97
0A8743B44389131AF51985778ACFBDB676> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 105 /i put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four 
/five /six /seven /eight /nine 6{/.notdef}rp /at /A 
/B /C /D /E /F /G /H /I 
/.notdef /K /L /M /N /O /P /Q 
/R /S /T /U /V /W /X /Y 
6{/.notdef}rp /quoteleft /a /b /c /d /e /f 
/g /h /i 6{/.notdef}rp /p /q /r /s 
/t /u /v /w /x 135{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
367.364 364.616 mo
(i)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 372.316 mo
(69151)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
.709 lw
393.824 375.306 mo
393.824 346.956 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 352.166 mo
(121)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/y <1C60D8A8C9B74E615DF37ED16CE747B84926088A153D93D85EB0D7B12423
143C995719D6557D9EE5935C7BEFDBA927E45C9661A36A6B2894807F7199D570
573FBA83D26C9DD16DFE353BF338C6DBDFBCC98F54BAEBC05D8D4799980AB4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 121 /y put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright 6{/.notdef}rp /zero /one /two /three /four 
/five /six /seven /eight /nine 6{/.notdef}rp /at /A 
/B /C /D /E /F /G /H /I 
/.notdef /K /L /M /N /O /P /Q 
/R /S /T /U /V /W /X /Y 
6{/.notdef}rp /quoteleft /a /b /c /d /e /f 
/g /h /i 6{/.notdef}rp /p /q /r /s 
/t /u /v /w /x /y 134{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
412.104 364.456 mo
(y)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 372.316 mo
(79171)
[3.39008 27.811 3.39008 3.39011 0 ]xsh
1.417 lw
440.234 375.306 mo
440.234 346.956 li
@
.398 lw
.15369 375.506 mo
440.944 375.506 li
@
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
10.5837 392.126 mo
(1)sh
24.9777 392.126 mo
(010)
[14.4041 14.3971 0 ]xsh
1.417 lw
68.8937 404.056 mo
68.8937 375.706 li
@
%ADOBeginSubsetFont: IRRAAA+CMR5 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWI+CMR5 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/A <1C60D8A8C9B5FAE4068DE1AB47438201D920D0E80FC79A82A80AF6AC214B
696CDA6C4F482C7D5BAFF53E44414E0F0D1C27B7B4D34FFE3850E15E76E220F6
7698659669477FB9FA7779C4CB93372298D97631728B3AB9C7C4289EB8EC965A
7211E675D091E430A7A679767144D22691D30950CFA3D063FD4E345B8EBABF90
3B3DEC7686A36691877B824C3F16DF2CD306944945CF7D5B99D345525B3563D3
5036CAD456975AB108636E1AE61C6A2DB7EF9D403E6A0FB9CE94EFA611595D99
A7A4090C64F3CBBF161D35> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWI+CMR5 /Encoding get
dup 65 /A put
pop
%ADOEndSubsetFont
/BKUCWI+CMR5*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 7{/.notdef}rp /A 190{/.notdef}rp]
BKUCWI+CMR5 nf
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 380.906 mo
(10)
[3.39009 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
83.6437 393.276 mo
(LF)
[6.47604 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 401.066 mo
(A)sh
106.184 401.066 mo
(12)
[3.39009 0 ]xsh
.709 lw
115.314 404.056 mo
115.314 375.706 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 380.906 mo
(26)
[3.39009 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
126.934 393.276 mo
(SUB)
[6.64222 8.21907 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 401.066 mo
(1A)
[3.39009 0 ]xsh
152.254 401.066 mo
(32)
[3.39009 0 ]xsh
1.417 lw
161.734 404.056 mo
161.734 375.706 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 380.906 mo
(42)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/asterisk <1C60D8A8C9B7A73DB9E354DDC1C1E895818E2BC9DBEF8CE3DE830
7ADE59E33534181C21C31E4CFD49BD833A4207D005C0B55D76D7AE78BE707838
D457B44B14D4F1882E402FC50A0B525D0C54F58C22F270C9B4F146C25629E033
B012B2EECF419D3ABF1C88B0DA6A42DDF7C73843C81787E4B970D04E0E939E74
63D451131957E27346EC1686E148B6442B71548806504B8113B2A9FF1992FB4E
E2D4A19496FCDF007652F6C98B11EF4D04E05C89B6C665FFCECE0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 42 /asterisk put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk 5{/.notdef}rp /zero /one /two /three 
/four /five /six /seven /eight /nine 6{/.notdef}rp /at 
/A /B /C /D /E /F /G /H 
/I /.notdef /K /L /M /N /O /P 
/Q /R /S /T /U /V /W /X 
/Y 6{/.notdef}rp /quoteleft /a /b /c /d /e 
/f /g /h /i 6{/.notdef}rp /p /q /r 
/s /t /u /v /w /x /y 134{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
180.134 393.276 mo
(*)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 401.066 mo
(2A)
[3.39009 0 ]xsh
199.024 401.066 mo
(52)
[3.39008 0 ]xsh
.709 lw
208.154 404.056 mo
208.154 375.706 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 380.906 mo
(58)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/colon <1C60D8A8C9B8574464859E1C706DB4AE3AE177C14A2E14B1A26BDF1D
55DB552FF45B81D5B63AF9F5CFC4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 58 /colon put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk 5{/.notdef}rp /zero /one /two /three 
/four /five /six /seven /eight /nine /colon 5{/.notdef}rp 
/at /A /B /C /D /E /F /G 
/H /I /.notdef /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y 6{/.notdef}rp /quoteleft /a /b /c /d 
/e /f /g /h /i 6{/.notdef}rp /p /q 
/r /s /t /u /v /w /x /y 
134{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
226.864 393.276 mo
(:)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 401.066 mo
(3A)
[3.39008 0 ]xsh
245.084 401.066 mo
(72)
[3.39008 0 ]xsh
1.417 lw
254.564 404.056 mo
254.564 375.706 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 380.906 mo
(74)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/J <1C60D8A8C9B743831B883C549E9DFF01E6B1ED7906E0EEC43B93ABFFA823
19F16789395A64A9D8AA62AFAD73986BE714F55F9DD01D4E76576808AFE3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 74 /J put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk 5{/.notdef}rp /zero /one /two /three 
/four /five /six /seven /eight /nine /colon 5{/.notdef}rp 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y 6{/.notdef}rp /quoteleft /a /b /c /d 
/e /f /g /h /i 6{/.notdef}rp /p /q 
/r /s /t /u /v /w /x /y 
134{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
273.134 393.276 mo
(J)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 401.066 mo
(4A112)
[3.39008 27.811 3.39008 3.39008 0 ]xsh
.709 lw
300.984 404.056 mo
300.984 375.706 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 380.906 mo
(90)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Z <1C60D8A8C9B7D8BE6A12B1903CF4B0C851262916CF44AA25AEFD1C6C2C38
EB94E1CE42FA8311A1512D9D69DDEDA530719C9154EF6FF65DF081A6F5539E6F
626244A073525A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 90 /Z put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk 5{/.notdef}rp /zero /one /two /three 
/four /five /six /seven /eight /nine /colon 5{/.notdef}rp 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z 5{/.notdef}rp /quoteleft /a /b /c 
/d /e /f /g /h /i 6{/.notdef}rp /p 
/q /r /s /t /u /v /w /x 
/y 134{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
318.374 393.276 mo
(Z)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 401.066 mo
(5A132)
[3.39008 27.811 3.39008 3.39008 0 ]xsh
1.417 lw
347.404 404.056 mo
347.404 375.706 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 380.906 mo
(106)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/j <1C60D8A8C9B860866F4A062D3C59312121FA9B021AADDC836C31EFC447CE
5240DD2120381D8480774FC8EF77D957E67FFB2228AAEC2FE332BD3503B542CF
7AA0380B03ABC5E1EA730A9AB8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 106 /j put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk 5{/.notdef}rp /zero /one /two /three 
/four /five /six /seven /eight /nine /colon 5{/.notdef}rp 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z 5{/.notdef}rp /quoteleft /a /b /c 
/d /e /f /g /h /i /j 5{/.notdef}rp 
/p /q /r /s /t /u /v /w 
/x /y 134{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
367.204 393.116 mo
(j)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 401.066 mo
(6A152)
[3.39008 27.811 3.39008 3.39008 0 ]xsh
.709 lw
393.824 404.056 mo
393.824 375.706 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 380.906 mo
(122)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/z <1C60D8A8C9B7693F0E0DF5750FF0B7B856D0054A8CD617DE78C6AE85046C
5E5EF0A87F03968514C46D8A1BA1D9AA7441F699AC99A8BC35250836D6178FED
7FF18D700FCF2F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 122 /z put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk 5{/.notdef}rp /zero /one /two /three 
/four /five /six /seven /eight /nine /colon 5{/.notdef}rp 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z 5{/.notdef}rp /quoteleft /a /b /c 
/d /e /f /g /h /i /j 5{/.notdef}rp 
/p /q /r /s /t /u /v /w 
/x /y /z 133{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
412.264 393.276 mo
(z)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 401.066 mo
(7A172)
[3.39008 27.811 3.39008 3.39008 0 ]xsh
1.417 lw
440.234 404.056 mo
440.234 375.706 li
@
.398 lw
.15369 404.256 mo
440.944 404.256 li
@
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
10.5837 420.866 mo
(1)sh
24.9777 420.866 mo
(011)
[14.4041 14.3971 0 ]xsh
1.417 lw
68.8937 432.796 mo
68.8937 404.446 li
@
%ADOBeginSubsetFont: IRRAAA+CMR5 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWI+CMR5 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/B <1C60D8A8C9B5A8C73EC53ACE0E26D5088BA4518E716B63CA2EFDF8679E39
65E9457056B2DC2C264BA9E4FB449F01A945727F9554F66E2C3CE83DF8E1C00A
DB27D6D66A0390D327E4785B09F8317B6F332CFE5758CCE2A97FD7CAA37296E8
7E9FED8AC5F73DE7800A6984F0552E830B837E3900CED055A632998E7A9A3E12
7DDC465C28E641002FFE50ECB1A24EE627> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWI+CMR5 /Encoding get
dup 66 /B put
pop
%ADOEndSubsetFont
/BKUCWI+CMR5*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 7{/.notdef}rp /A /B 189{/.notdef}rp]
BKUCWI+CMR5 nf
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 409.656 mo
(11)
[3.39009 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
82.2337 422.026 mo
(VT)
[7.97043 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 429.806 mo
(B)sh
106.184 429.806 mo
(13)
[3.39009 0 ]xsh
.709 lw
115.314 432.796 mo
115.314 404.446 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 409.656 mo
(27)
[3.39009 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
127.634 422.026 mo
(ESC)
[7.1395 6.64223 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 429.806 mo
(1B)
[3.39009 0 ]xsh
152.254 429.806 mo
(33)
[3.39009 0 ]xsh
1.417 lw
161.734 432.796 mo
161.734 404.446 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 409.656 mo
(43)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/plus <1C60D8A8C9B6FC2D57823F96FCEAA42600BD46AFBB76FB6FF2C168953
BCB7FF7D0E7F5CE3217809FB248485B096C8249504CD271987061A868385A7E2
BE1F08F0D0B8329FA5B5F11EC03D020ECC8A0457ADD9A63765A60296998F5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 43 /plus put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus 4{/.notdef}rp /zero /one /two 
/three /four /five /six /seven /eight /nine /colon 
5{/.notdef}rp /at /A /B /C /D /E /F 
/G /H /I /J /K /L /M /N 
/O /P /Q /R /S /T /U /V 
/W /X /Y /Z 5{/.notdef}rp /quoteleft /a /b 
/c /d /e /f /g /h /i /j 
5{/.notdef}rp /p /q /r /s /t /u /v 
/w /x /y /z 133{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
178.474 422.026 mo
(+)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 429.806 mo
(2B)
[3.39009 0 ]xsh
199.024 429.806 mo
(53)
[3.39008 0 ]xsh
.709 lw
208.154 432.796 mo
208.154 404.446 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 409.656 mo
(59)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/semicolon <1C60D8A8C9B8574414C8C5CF1344446E3FDDEFEA6C12F40B73FC
89B65A251F69D6971ED3323B6664B423F038DF1C4276DB7C66776FFC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 59 /semicolon put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus 4{/.notdef}rp /zero /one /two 
/three /four /five /six /seven /eight /nine /colon 
/semicolon 4{/.notdef}rp /at /A /B /C /D /E 
/F /G /H /I /J /K /L /M 
/N /O /P /Q /R /S /T /U 
/V /W /X /Y /Z 5{/.notdef}rp /quoteleft /a 
/b /c /d /e /f /g /h /i 
/j 5{/.notdef}rp /p /q /r /s /t /u 
/v /w /x /y /z 133{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
227.524 422.026 mo
(;)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 429.806 mo
(3B)
[3.39008 0 ]xsh
245.084 429.806 mo
(73)
[3.39008 0 ]xsh
1.417 lw
254.564 432.796 mo
254.564 404.446 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 409.656 mo
(75)
[3.39008 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
271.814 422.026 mo
(K)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 429.806 mo
(4B113)
[3.39008 27.8114 3.39008 3.39008 0 ]xsh
.709 lw
300.984 432.796 mo
300.984 404.446 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 409.656 mo
(91)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/bracketleft <1C60D8A8C9B84AC0EFA86B3EFF2C9A66B6C2D105E532B4D7EB
FC23B3CC8CAC2D96418D8AC1A1C68A5C344F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 91 /bracketleft put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus 4{/.notdef}rp /zero /one /two 
/three /four /five /six /seven /eight /nine /colon 
/semicolon 4{/.notdef}rp /at /A /B /C /D /E 
/F /G /H /I /J /K /L /M 
/N /O /P /Q /R /S /T /U 
/V /W /X /Y /Z /bracketleft 4{/.notdef}rp /quoteleft 
/a /b /c /d /e /f /g /h 
/i /j 5{/.notdef}rp /p /q /r /s /t 
/u /v /w /x /y /z 133{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
320.294 421.526 mo
([)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 429.806 mo
(5B133)
[3.39008 27.8114 3.39008 3.39008 0 ]xsh
1.417 lw
347.404 432.796 mo
347.404 404.446 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 409.656 mo
(107)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/k <1C60D8A8C9B75378BDAAB5C021928B27E65573E33E2274744630F625F17E
392835A0E6E6875EC4D75ADE638FAAEC9D3AE15980823AE49B54A3EF6B6C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 107 /k put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus 4{/.notdef}rp /zero /one /two 
/three /four /five /six /seven /eight /nine /colon 
/semicolon 4{/.notdef}rp /at /A /B /C /D /E 
/F /G /H /I /J /K /L /M 
/N /O /P /Q /R /S /T /U 
/V /W /X /Y /Z /bracketleft 4{/.notdef}rp /quoteleft 
/a /b /c /d /e /f /g /h 
/i /j /k 4{/.notdef}rp /p /q /r /s 
/t /u /v /w /x /y /z 133{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
365.874 422.026 mo
(k)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 429.806 mo
(6B153)
[3.39008 27.8114 3.39008 3.39008 0 ]xsh
.709 lw
393.824 432.796 mo
393.824 404.446 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 409.656 mo
(123)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: RDHAAA+MnSymbol10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /RDHAAA+MnSymbol10 def
/FontInfo 7 dict dup begin
/Notice (Design by Achim Blumensath, Conversion to pfb by Michael Zedler. This font is in the public domain.) def
/Weight (Regular) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 152 /braceleft put
def
/FontBBox {-256 -2477 2546 1546} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 -0 683 717] def
/BlueScale 0.0291176 def
/StdHW [46] def
/StdVW [46] def
/StemSnapV [46 61 72] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/braceleft <1C60D8A8C9B7A59EA720406CFC42A4FF2A46EA030FFD06C1C3A1
17D49C7EA633BDDE00AD785EB87E621667070A7574CE1C8937C0B8BC7B238E56
0064D03462CBF27E4B0734E7271AD11741C89D4EAD5FD5FC342E2E67E5968B95
AF90FA333B968050A5D7197E2FF8406A89BFEB61B7CA77902B435688A3D06461
DFB23C3CAA> |-
/.notdef <1C60D8A8C9B5EE31F4> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BKUCWJ+MnSymbol10 /RDHAAA+MnSymbol10 findfont ct_VMDictPut
/BKUCWJ+MnSymbol10*1 
[152{/.notdef}rp /braceleft 103{/.notdef}rp]
BKUCWJ+MnSymbol10 nf
BKUCWJ+MnSymbol10*1 [10.501 0 0 -10.501 0 0 ]msf
414.224 421.736 mo
(\230)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 429.806 mo
(7B173)
[3.39008 27.8114 3.39008 3.39008 0 ]xsh
1.417 lw
440.234 432.796 mo
440.234 404.446 li
@
.398 lw
.15369 432.996 mo
440.944 432.996 li
@
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
10.5837 449.616 mo
(1)sh
24.9777 449.616 mo
(100)
[14.4041 14.3971 0 ]xsh
1.417 lw
68.8937 461.546 mo
68.8937 433.196 li
@
%ADOBeginSubsetFont: IRRAAA+CMR5 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWI+CMR5 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/C <1C60D8A8C9B5C029BD88162473C3C428D1E208BE99035D2D9593274BBDA2
3D52B1B4601BC2B2E4D14F862B27116E0B6D9AE865B6A4DEBD20E6143A4B1F39
F3779E3CCFB9ACA240A0D4CF49EFBE1B69B3924871E3BE1CD6BDB886F3B5BCD2
2B72F2905DAE9304436316A6C553E5820341AFEA1EF6066A0214A3866E9AAC4A
ABBD6D75BAE8EA7F2E66AF00> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWI+CMR5 /Encoding get
dup 67 /C put
pop
%ADOEndSubsetFont
/BKUCWI+CMR5*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 7{/.notdef}rp /A /B /C 188{/.notdef}rp]
BKUCWI+CMR5 nf
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 438.396 mo
(12)
[3.39009 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
83.4837 450.766 mo
(FF)
[6.80714 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 458.556 mo
(C)sh
106.184 458.556 mo
(14)
[3.39009 0 ]xsh
.709 lw
115.314 461.546 mo
115.314 433.196 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 438.396 mo
(28)
[3.39009 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
129.634 450.766 mo
(FS)
[6.80714 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 458.556 mo
(1C)
[3.39009 0 ]xsh
152.254 458.556 mo
(34)
[3.39009 0 ]xsh
1.417 lw
161.734 461.546 mo
161.734 433.196 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 438.396 mo
(44)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/comma <1C60D8A8C9B8574414C8C5CF13444475B99FD835B8DDBA7AAE30F82F
90C4504983CD4683A675> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 44 /comma put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma 3{/.notdef}rp /zero /one 
/two /three /four /five /six /seven /eight /nine 
/colon /semicolon 4{/.notdef}rp /at /A /B /C /D 
/E /F /G /H /I /J /K /L 
/M /N /O /P /Q /R /S /T 
/U /V /W /X /Y /Z /bracketleft 4{/.notdef}rp 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k 4{/.notdef}rp /p /q /r 
/s /t /u /v /w /x /y /z 
133{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
181.464 450.766 mo
(,)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 458.556 mo
(2C)
[3.39009 0 ]xsh
199.024 458.556 mo
(54)
[3.39008 0 ]xsh
.709 lw
208.154 461.546 mo
208.154 433.196 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 438.396 mo
(60)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: CBIAAA+MnSymbol10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /CBIAAA+MnSymbol10 def
/FontInfo 7 dict dup begin
/Notice (Design by Achim Blumensath, Conversion to pfb by Michael Zedler. This font is in the public domain.) def
/Weight (Regular) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 64 /less put
def
/FontBBox {-256 -2477 2546 1546} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 -0 683 717] def
/BlueScale 0.0291176 def
/StdHW [46] def
/StdVW [46] def
/StemSnapH [46] def
/StemSnapV [46 61 72] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/less <1C60D8A8C9B798159459EF3E34B3EC10AC6929A44502458FBCE6A745A
C80AC6DF19308554BC933350D6D84C74360F9BEA4BE152A313CA51C3AA154E48
45A5F7E39F5ECBDDDE8C0EF835F294DABA7727C504B37D1CFE8D7CFB3079E63A
A0BAC> |-
/.notdef <1C60D8A8C9B5EE31F4> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BKUCWK+MnSymbol10 /CBIAAA+MnSymbol10 findfont ct_VMDictPut
/BKUCWK+MnSymbol10*1 
[64{/.notdef}rp /less 191{/.notdef}rp]
BKUCWK+MnSymbol10 nf
BKUCWK+MnSymbol10*1 [10.501 0 0 -10.501 0 0 ]msf
228.324 450.766 mo
(@)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 458.556 mo
(3C)
[3.39008 0 ]xsh
245.084 458.556 mo
(74)
[3.39008 0 ]xsh
1.417 lw
254.564 461.546 mo
254.564 433.196 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 438.396 mo
(76)
[3.39008 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
272.724 450.766 mo
(L)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 458.556 mo
(4C114)
[3.39008 27.8094 3.39008 3.39008 0 ]xsh
.709 lw
300.984 461.546 mo
300.984 433.196 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 438.396 mo
(92)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: RDHAAA+MnSymbol10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWJ+MnSymbol10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash.right <1C60D8A8C9B719BD68AADD372F62A8B858059E3E5446E1286B
2DD56964F391993F639C0484AFC870D0B12DF36966AB91488689FE6EC872E844
7DD527E0E111BAFF8E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWJ+MnSymbol10 /Encoding get
dup 131 /slash.right put
pop
%ADOEndSubsetFont
/BKUCWJ+MnSymbol10*1 
[131{/.notdef}rp /slash.right 20{/.notdef}rp /braceleft 103{/.notdef}rp]
BKUCWJ+MnSymbol10 nf
BKUCWJ+MnSymbol10*1 [10.501 0 0 -10.501 0 0 ]msf
319.834 450.476 mo
(\203)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 458.556 mo
(5C134)
[3.39008 27.8094 3.39008 3.39008 0 ]xsh
1.417 lw
347.404 461.546 mo
347.404 433.196 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 438.396 mo
(108)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/l <1C60D8A8C9B87C1336DBF9181CE04E9C719D106F4FECEF5A7B66BCCAA0F6
CB53> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 108 /l put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma 3{/.notdef}rp /zero /one 
/two /three /four /five /six /seven /eight /nine 
/colon /semicolon 4{/.notdef}rp /at /A /B /C /D 
/E /F /G /H /I /J /K /L 
/M /N /O /P /Q /R /S /T 
/U /V /W /X /Y /Z /bracketleft 4{/.notdef}rp 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l 3{/.notdef}rp /p /q 
/r /s /t /u /v /w /x /y 
/z 133{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
367.364 450.766 mo
(l)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 458.556 mo
(6C154)
[3.39008 27.8094 3.39008 3.39008 0 ]xsh
.709 lw
393.824 461.546 mo
393.824 433.196 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 438.396 mo
(124)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: RDHAAA+MnSymbol10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWJ+MnSymbol10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/divides.alt0 <1C60D8A8C9B88DD9422ADCDFC2EEBE8EAFF60C822ABC4FBD5
3FDB18E407FD9C7CA889C4F3D39B4C7141459DA0E33C716> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWJ+MnSymbol10 /Encoding get
dup 83 /divides.alt0 put
pop
%ADOEndSubsetFont
/BKUCWJ+MnSymbol10*1 
[83{/.notdef}rp /divides.alt0 47{/.notdef}rp /slash.right 20{/.notdef}rp /braceleft 103{/.notdef}rp]
BKUCWJ+MnSymbol10 nf
BKUCWJ+MnSymbol10*1 [10.501 0 0 -10.501 0 0 ]msf
413.694 450.476 mo
(S)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 458.556 mo
(7C174)
[3.39008 27.8094 3.39008 3.39008 0 ]xsh
1.417 lw
440.234 461.546 mo
440.234 433.196 li
@
.398 lw
.15369 461.746 mo
440.944 461.746 li
@
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
10.5837 478.356 mo
(1)sh
24.9777 478.356 mo
(101)
[14.4041 14.3971 0 ]xsh
1.417 lw
68.8937 490.286 mo
68.8937 461.936 li
@
%ADOBeginSubsetFont: IRRAAA+CMR5 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWI+CMR5 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/D <1C60D8A8C9B512DBD7E73937B51DE8E9ABF6A9164843E20F7E688CF8F61B
42B92C8DD7854805CE0AF226AC35405972AF035420DDF7CB0C61A1A9ACD97EB4
BE9BF5B228650F0F8605811B6ADD7F87D54D6CB04EEF0709DA46748701A9C8B7
F39AD1DE49A07CDD8707980F06018E220ACAC9432E9592C64618A701C04C177C
ADB685CD89473DA91730021A89> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWI+CMR5 /Encoding get
dup 68 /D put
pop
%ADOEndSubsetFont
/BKUCWI+CMR5*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 7{/.notdef}rp /A /B /C /D 
187{/.notdef}rp]
BKUCWI+CMR5 nf
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 467.146 mo
(13)
[3.39009 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
82.6137 479.516 mo
(CR)
[7.63806 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 487.296 mo
(D)sh
106.184 487.296 mo
(15)
[3.39009 0 ]xsh
.709 lw
115.314 490.286 mo
115.314 461.936 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 467.146 mo
(29)
[3.39009 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
129.044 479.516 mo
(GS)
[7.97043 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 487.296 mo
(1D)
[3.39009 0 ]xsh
152.254 487.296 mo
(35)
[3.39009 0 ]xsh
1.417 lw
161.734 490.286 mo
161.734 461.936 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 467.146 mo
(45)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: VXVBAA+MnSymbol10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /VXVBAA+MnSymbol10 def
/FontInfo 7 dict dup begin
/Notice (Design by Achim Blumensath, Conversion to pfb by Michael Zedler. This font is in the public domain.) def
/Weight (Regular) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 16 /minus put
def
/FontBBox {-256 -2477 2546 1546} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 -0 683 717] def
/BlueScale 0.0291176 def
/StdHW [46] def
/StdVW [46] def
/StemSnapV [46 61 72] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/minus <1C60D8A8C9B7C054199246BF547E77B2B0B4AA0D612D79668E91AB15
CCA23A9D3096A3690D17E2A10827694E> |-
/.notdef <1C60D8A8C9B5EE31F4> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/BKUCWL+MnSymbol10 /VXVBAA+MnSymbol10 findfont ct_VMDictPut
/BKUCWL+MnSymbol10*1 
[16{/.notdef}rp /minus 239{/.notdef}rp]
BKUCWL+MnSymbol10 nf
BKUCWL+MnSymbol10*1 [10.501 0 0 -10.501 0 0 ]msf
179.974 479.516 mo
(\020)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 487.296 mo
(2D)
[3.39009 0 ]xsh
199.024 487.296 mo
(55)
[3.39008 0 ]xsh
.709 lw
208.154 490.286 mo
208.154 461.936 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 467.146 mo
(61)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/equal <1C60D8A8C9B6FC2D989A7E1099BA67D9D0CEC7515674CFB2B1FC2A1C
17457AACDE4268B9D68CA5C6417D82DF8FA9A401FA96AB3F879412AE19E89000
3D2F53F210ADBB10F4EA2FC495142AC218D4E5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 61 /equal put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma 3{/.notdef}rp /zero /one 
/two /three /four /five /six /seven /eight /nine 
/colon /semicolon /.notdef /equal 2{/.notdef}rp /at /A /B 
/C /D /E /F /G /H /I /J 
/K /L /M /N /O /P /Q /R 
/S /T /U /V /W /X /Y /Z 
/bracketleft 4{/.notdef}rp /quoteleft /a /b /c /d /e 
/f /g /h /i /j /k /l 3{/.notdef}rp 
/p /q /r /s /t /u /v /w 
/x /y /z 133{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
224.544 479.516 mo
(=)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 487.296 mo
(3D)
[3.39008 0 ]xsh
245.084 487.296 mo
(75)
[3.39008 0 ]xsh
1.417 lw
254.564 490.286 mo
254.564 461.936 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 467.146 mo
(77)
[3.39008 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
270.734 479.516 mo
(M)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 487.296 mo
(4D115)
[3.39008 27.8089 3.39008 3.39008 0 ]xsh
.709 lw
300.984 490.286 mo
300.984 461.936 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 467.146 mo
(93)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/bracketright <1C60D8A8C9B84AC0EFA86B3EFF2C9A66B03CF4E816AD18A2B
47EE7FBF4158EB0C3B465E650E3F82D28DE8378> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 93 /bracketright put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma 3{/.notdef}rp /zero /one 
/two /three /four /five /six /seven /eight /nine 
/colon /semicolon /.notdef /equal 2{/.notdef}rp /at /A /B 
/C /D /E /F /G /H /I /J 
/K /L /M /N /O /P /Q /R 
/S /T /U /V /W /X /Y /Z 
/bracketleft /.notdef /bracketright 2{/.notdef}rp /quoteleft /a /b /c 
/d /e /f /g /h /i /j /k 
/l 3{/.notdef}rp /p /q /r /s /t /u 
/v /w /x /y /z 133{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
320.294 479.016 mo
(])sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 487.296 mo
(5D135)
[3.39008 27.8089 3.39008 3.39008 0 ]xsh
1.417 lw
347.404 490.286 mo
347.404 461.936 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 467.146 mo
(109)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/m <1C60D8A8C9B6CFDA41B25CD39B0FC4560DAF68DDA68FB088CD9CCB690C5E
581767CEEA57F128AC6AD29AD421B85744ADAFF09C5B19321E66E66F3B9E4665
D035DBBEC41241D24164F259E9E07A96FDEBE11D6231D1AADAF667B5BD42780F
416F9094857401A981DDBD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 109 /m put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma 3{/.notdef}rp /zero /one 
/two /three /four /five /six /seven /eight /nine 
/colon /semicolon /.notdef /equal 2{/.notdef}rp /at /A /B 
/C /D /E /F /G /H /I /J 
/K /L /M /N /O /P /Q /R 
/S /T /U /V /W /X /Y /Z 
/bracketleft /.notdef /bracketright 2{/.notdef}rp /quoteleft /a /b /c 
/d /e /f /g /h /i /j /k 
/l /m 2{/.notdef}rp /p /q /r /s /t 
/u /v /w /x /y /z 133{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
364.044 479.516 mo
(m)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 487.296 mo
(6D155)
[3.39008 27.8089 3.39008 3.39008 0 ]xsh
.709 lw
393.824 490.286 mo
393.824 461.936 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 467.146 mo
(125)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: RDHAAA+MnSymbol10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWJ+MnSymbol10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/braceright <1C60D8A8C9B7A59EA720406CFC42A4FF2A8438C152572EF46B1
3D12D606EFFECBF1980D3BF8E966AACE6BD414B0B74A32D4129B3035CAFAE282
3C2FCC3D0D1A15921E64C9A41EBBECD8C89E90ABE68E010136374B18A55A5E22
28A68721A8CE46EB212057CFCD1ACE6B2926657889E966D0AA1D38564BE7ADCC
67A97836F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWJ+MnSymbol10 /Encoding get
dup 157 /braceright put
pop
%ADOEndSubsetFont
/BKUCWJ+MnSymbol10*1 
[83{/.notdef}rp /divides.alt0 47{/.notdef}rp /slash.right 20{/.notdef}rp /braceleft 4{/.notdef}rp /braceright 
98{/.notdef}rp]
BKUCWJ+MnSymbol10 nf
BKUCWJ+MnSymbol10*1 [10.501 0 0 -10.501 0 0 ]msf
414.224 479.226 mo
(\235)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 487.296 mo
(7D175)
[3.39008 27.8089 3.39008 3.39008 0 ]xsh
1.417 lw
440.234 490.286 mo
440.234 461.936 li
@
.398 lw
.15369 490.486 mo
440.944 490.486 li
@
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
10.5837 507.106 mo
(1)sh
24.9777 507.106 mo
(110)
[14.4041 14.3971 0 ]xsh
1.417 lw
68.8937 519.036 mo
68.8937 490.686 li
@
%ADOBeginSubsetFont: IRRAAA+CMR5 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWI+CMR5 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/E <1C60D8A8C9B58A94F646D32F2169434B3C857A6F07050B83AF986C97E1BD
7494BA3326CBEFCC30AC40C9C65A371F2D11E20581F6F7F2A31CD19DC5BEE370
602AF16C48E45F682219A2977F02551AB2EE5435D6D150C054C24EE4DFD4A442
69CCC2773A245B8F9BE1C2099608BCB98401FC73528C1C78F8735DC5D227CEF8
065BF663B0CC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWI+CMR5 /Encoding get
dup 69 /E put
pop
%ADOEndSubsetFont
/BKUCWI+CMR5*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 7{/.notdef}rp /A /B /C /D 
/E 186{/.notdef}rp]
BKUCWI+CMR5 nf
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 495.886 mo
(14)
[3.39009 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
82.5737 508.256 mo
(SO)
[6.64223 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 516.046 mo
(E)sh
106.184 516.046 mo
(16)
[3.39009 0 ]xsh
.709 lw
115.314 519.036 mo
115.314 490.686 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 495.886 mo
(30)
[3.39009 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
129.174 508.256 mo
(RS)
[7.7205 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 516.046 mo
(1E)
[3.39009 0 ]xsh
152.254 516.046 mo
(36)
[3.39009 0 ]xsh
1.417 lw
161.734 519.036 mo
161.734 490.686 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 495.886 mo
(46)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B8574464859E074121EF25E578E57727A0111D8F02> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 46 /period put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /.notdef /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /.notdef /equal 2{/.notdef}rp /at 
/A /B /C /D /E /F /G /H 
/I /J /K /L /M /N /O /P 
/Q /R /S /T /U /V /W /X 
/Y /Z /bracketleft /.notdef /bracketright 2{/.notdef}rp /quoteleft /a 
/b /c /d /e /f /g /h /i 
/j /k /l /m 2{/.notdef}rp /p /q /r 
/s /t /u /v /w /x /y /z 
133{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
180.804 508.256 mo
(.)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 516.046 mo
(2E)
[3.39009 0 ]xsh
199.024 516.046 mo
(56)
[3.39008 0 ]xsh
.709 lw
208.154 519.036 mo
208.154 490.686 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 495.886 mo
(62)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: CBIAAA+MnSymbol10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWK+MnSymbol10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/greater <1C60D8A8C9B798159459EF3E34B3EC108E4AAFE40BC810A44D92B9
7752631665E263CAD7BBFF2E0383DAC0BAFB6FB685D135DD695353E829DBFC21
EA7FDA3C420352F426655CB0F130E7DE254A13D3493C24B37BFBA87EFC282901
13AD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWK+MnSymbol10 /Encoding get
dup 65 /greater put
pop
%ADOEndSubsetFont
/BKUCWK+MnSymbol10*1 
[64{/.notdef}rp /less /greater 190{/.notdef}rp]
BKUCWK+MnSymbol10 nf
BKUCWK+MnSymbol10*1 [10.501 0 0 -10.501 0 0 ]msf
228.324 508.256 mo
(A)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 516.046 mo
(3E)
[3.39008 0 ]xsh
245.084 516.046 mo
(76)
[3.39008 0 ]xsh
1.417 lw
254.564 519.036 mo
254.564 490.686 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 495.886 mo
(78)
[3.39008 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
271.724 508.256 mo
(N)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 516.046 mo
(4E116)
[3.39008 27.8079 3.39008 3.39011 0 ]xsh
.709 lw
300.984 519.036 mo
300.984 490.686 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 495.886 mo
(94)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/circumflex <1C60D8A8C9B7A73DB619E39FEFB0774FF66039D3CF3621E3408
F6E29D19B10FCE81CC60A9201072ADD02CDA2319E1B85> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 94 /circumflex put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /.notdef /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /.notdef /equal 2{/.notdef}rp /at 
/A /B /C /D /E /F /G /H 
/I /J /K /L /M /N /O /P 
/Q /R /S /T /U /V /W /X 
/Y /Z /bracketleft /.notdef /bracketright /circumflex /.notdef /quoteleft 
/a /b /c /d /e /f /g /h 
/i /j /k /l /m 2{/.notdef}rp /p /q 
/r /s /t /u /v /w /x /y 
/z 133{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
321.024 508.256 mo
(^)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 516.046 mo
(5E136)
[3.39008 27.8079 3.39008 3.39011 0 ]xsh
1.417 lw
347.404 519.036 mo
347.404 490.686 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 495.886 mo
(110)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/n <1C60D8A8C9B7B71A30FC1EF512602989A2E0D86EC7C02639B6436B84CC18
653B5379FF9776F5B257A66750D0ABEFE37B6A92687D88CE251EED97BCC4DC44
8D63FE205AE5DF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 110 /n put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /.notdef /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /.notdef /equal 2{/.notdef}rp /at 
/A /B /C /D /E /F /G /H 
/I /J /K /L /M /N /O /P 
/Q /R /S /T /U /V /W /X 
/Y /Z /bracketleft /.notdef /bracketright /circumflex /.notdef /quoteleft 
/a /b /c /d /e /f /g /h 
/i /j /k /l /m /n /.notdef /p 
/q /r /s /t /u /v /w /x 
/y /z 133{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
365.704 508.256 mo
(n)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 516.046 mo
(6E156)
[3.39008 27.8079 3.39008 3.39011 0 ]xsh
.709 lw
393.824 519.036 mo
393.824 490.686 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 495.886 mo
(126)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/tilde <1C60D8A8C9B7A73DB6782AB5C5A98FAFB8A980C2CE7AAD50270AA97A
178190DDADFAD267A032AF4AC5437EAD83D3D168028916FBB468471F8B4B9ED2
C949B64B26634A88705E216340DE85042FBF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 126 /tilde put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /.notdef /period /.notdef 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /.notdef /equal 2{/.notdef}rp /at 
/A /B /C /D /E /F /G /H 
/I /J /K /L /M /N /O /P 
/Q /R /S /T /U /V /W /X 
/Y /Z /bracketleft /.notdef /bracketright /circumflex /.notdef /quoteleft 
/a /b /c /d /e /f /g /h 
/i /j /k /l /m /n /.notdef /p 
/q /r /s /t /u /v /w /x 
/y /z 3{/.notdef}rp /tilde 129{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
413.864 508.256 mo
(~)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 516.046 mo
(7E176)
[3.39008 27.8079 3.39008 3.39011 0 ]xsh
1.417 lw
440.234 519.036 mo
440.234 490.686 li
@
.398 lw
.15369 519.236 mo
440.944 519.236 li
@
BKUCWF+CMR7*1 [6.974 0 0 -6.974 0 0 ]msf
10.5837 535.846 mo
(1)sh
24.9777 535.846 mo
(111)
[14.4041 14.3971 0 ]xsh
1.417 lw
68.8937 547.776 mo
68.8937 519.426 li
@
%ADOBeginSubsetFont: IRRAAA+CMR5 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWI+CMR5 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/F <1C60D8A8C9B69449C3C56CCA93EFF68D163DEEAA0A7F1777F8AF78B12DD7
80F25CE1C6E9F139EA47FEDED6A950DDBB13BE6B1F65CF5F164D6FF58B10F1C2
E2C27F587D7A2AF62C26F9E693FD1FEE1454D47465E829E5E3342B4F2008F34D
5908E8B44F4F8BBE5613FFDA3D02882D96CA54EF3AE985765ADBEDAA01942977
C1A36D7946FE8F48B71FE7AEDDD9B62C4AF5B2E64226C8CC45D165339501> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWI+CMR5 /Encoding get
dup 70 /F put
pop
%ADOEndSubsetFont
/BKUCWI+CMR5*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 7{/.notdef}rp /A /B /C /D 
/E /F 185{/.notdef}rp]
BKUCWI+CMR5 nf
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 524.636 mo
(15)
[3.39009 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
85.3137 537.006 mo
(SI)
[6.64223 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
71.5937 544.786 mo
(F)sh
106.184 544.786 mo
(17)
[3.39009 0 ]xsh
.709 lw
115.314 547.776 mo
115.314 519.426 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 524.636 mo
(31)
[3.39009 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
128.924 537.006 mo
(US)
[8.21906 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
117.664 544.786 mo
(1F)
[3.39009 0 ]xsh
152.254 544.786 mo
(37)
[3.39009 0 ]xsh
1.417 lw
161.734 547.776 mo
161.734 519.426 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 524.636 mo
(47)
[3.39009 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B7A73DB56225352A24C6E389DE2B55CA06CAB1D904D74F
E21B6520E910DE6837DBFFB95567192F781E541A03B8446689265DEAE7140ED2
3D1C3943714CDFC12315> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 47 /slash put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /.notdef /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /.notdef /equal 2{/.notdef}rp /at 
/A /B /C /D /E /F /G /H 
/I /J /K /L /M /N /O /P 
/Q /R /S /T /U /V /W /X 
/Y /Z /bracketleft /.notdef /bracketright /circumflex /.notdef /quoteleft 
/a /b /c /d /e /f /g /h 
/i /j /k /l /m /n /.notdef /p 
/q /r /s /t /u /v /w /x 
/y /z 3{/.notdef}rp /tilde 129{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
180.134 536.506 mo
(/)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.434 544.786 mo
(2F)
[3.39009 0 ]xsh
199.024 544.786 mo
(57)
[3.39008 0 ]xsh
.709 lw
208.154 547.776 mo
208.154 519.426 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 524.636 mo
(63)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/question <1C60D8A8C9B74383E5FC9F97684FB5790CCC4C17D65EF59251D3E
F3A3EE87DE257F8E3803BB17E5A34FBA8326B9EC40BFA9C3F0264C061EA428DD
2B0501552A1D6A90B30AA4ABFA1DB4FA2E0FD4C23E2DF7428B1D0A8FB437DD35
68265DB1243CD658A6284E5706DFAC5DE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 63 /question put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /.notdef /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /.notdef /equal /.notdef /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /.notdef /bracketright /circumflex /.notdef 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /.notdef 
/p /q /r /s /t /u /v /w 
/x /y /z 3{/.notdef}rp /tilde 129{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
225.704 537.006 mo
(?)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
210.494 544.786 mo
(3F)
[3.39008 0 ]xsh
245.084 544.786 mo
(77)
[3.39008 0 ]xsh
1.417 lw
254.564 547.776 mo
254.564 519.426 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 524.636 mo
(79)
[3.39008 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
271.564 537.006 mo
(O)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
257.264 544.786 mo
(4F117)
[3.39008 27.8094 3.39008 3.39008 0 ]xsh
.709 lw
300.984 547.776 mo
300.984 519.426 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 524.636 mo
(95)
[3.39008 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/dotaccent <1C60D8A8C9B8574417A77CC11943C31F8C4B8776FBF105D7776B
DEA1> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 95 /dotaccent put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /.notdef /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /.notdef /equal /.notdef /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /.notdef /bracketright /circumflex /dotaccent 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /.notdef 
/p /q /r /s /t /u /v /w 
/x /y /z 3{/.notdef}rp /tilde 129{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
321.474 537.006 mo
(_)sh
323.243 537.006 mo
(_)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
303.334 544.786 mo
(5F137)
[3.39008 27.8094 3.39008 3.39008 0 ]xsh
1.417 lw
347.404 547.776 mo
347.404 519.426 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 524.636 mo
(111)
[3.39008 3.39011 0 ]xsh
%ADOBeginSubsetFont: XSAAAA+CMSS10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWG+CMSS10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/o <1C60D8A8C9B7A73DCEDF64ACF1D92FCD603C38194EF3F5934A984E60F2AF
9261930EDC731DFAE6DC0D65525DECAD56D01145F3205995C224947145FF19D1
982913BDB63436AA6C4E83643807117E1530260A08A6B9A3F353> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWG+CMSS10 /Encoding get
dup 111 /o put
pop
%ADOEndSubsetFont
/BKUCWG+CMSS10*1 
[33{/.notdef}rp /exclam /quotedblright /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /.notdef /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /.notdef /equal /.notdef /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /.notdef /bracketright /circumflex /dotaccent 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z 3{/.notdef}rp /tilde 129{/.notdef}rp]
BKUCWG+CMSS10 nf
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
365.804 537.006 mo
(o)sh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
350.104 544.786 mo
(6F157)
[3.39008 27.8094 3.39008 3.39008 0 ]xsh
.709 lw
393.824 547.776 mo
393.824 519.426 li
@
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 524.636 mo
(127)
[3.39008 3.39011 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
405.724 537.006 mo
(DEL)
[8.63388 7.1395 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
396.164 544.786 mo
(7F177)
[3.39008 27.8094 3.39008 3.39008 0 ]xsh
1.417 lw
440.234 547.776 mo
440.234 519.426 li
@
.398 lw
.15369 547.976 mo
440.944 547.976 li
@
%ADOBeginSubsetFont: BKUCWH+FZJSJW--GB1-0-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/BKUCWH+FZJSJW--GB1-0-GBK-EUC-H 2 GetGlyphDirectory
1679 <001C60D8A8C9B5EE310D0E9BA842B4B3CF94F3B09D5CBA95F154417C19
2EAC1FB8D7F6DE8B8FC1C8FC3665D83BA64B6D687B2DED28FC8271D665A01767
2A22C07CA1F23AE86A39BB7C9EBE1CAB76D401CA2FA8A748E8BA485263788614
2322C2142727F37AAD0BC9A8EBB261AF7268CC2699AE4A8277601A50C573B70A
094C1722EC5898DFC3B07A79518F41AB3364FD59A5F3149CF3048C25730FE3F9
94098B43D3FF872FD2BD8B4F6FA6D5794745AA21A2830E8109FC64F3F7DB67B0
B2AE9A7E08A783C635C724CBB80CF57135D94162A7F3A57023FF763F068347C8
33FC6807D0C4BDA4A96E224C3E6E01BE36CD8B746F09C10B4FD2742CEF7DD7D5
AD565C3E089766E2044B5C7AEE7FB72D1B4B985D1E694237EC1E2C01302965AB
91B770548F3D9292316191D02D0020A4EAAF84B6DB34D4948E8E9E98F6C23D6E
452FA8A7152CD7B35DC79090FB> |
915 <001C60D8A8C9B5EE310D894A88D8754A7B48B3B431C56C0A1FB8F85E809
D3282CF02A21E174C649E4B934416E2F355758FBFA9A856879DFE1C637F39C30
ED48B5CC8B20DC8562AEC7CD6626340A4B6D9C4B6747AA9864D12F2E7A9F5EF1
FC2FA8EFEB8005EF238A352A59837AA4AB0F8CB047565ED154E4D9DC2FDA7650
E7ED1ABAC9983CADAE81F7F1A749743EADF6C713A741D7C50D9E528CCE960FB3
CA7B78C65B3FCDCA6F0664E6912B985D38E268140324A0F10549ACD01DC606DA
B66ACFADDB2867815ED4DFAF1F76D6E57D0C31CC28698D7D89097C733B397F03
7897D068BD4428E341E46E4018CB293787DF354670BC8B0C361CCC63E97742F4
CF086C591055620C39D0D8801A9D93A330D48C1EBD69F51796924D6E2229E308
6DA34CD98E1B56FBECD6D1DFE3ABA270C5008613DFD32ACA9A7E356DEF91A32F
32708ACF09451D7BF1CE2DD33CC500D21C84D846D590FFA489909F483486E05> |
!
end
end end
%ADOEndSubsetFont
/BKUCWH+FZJSJW--GB1-0-GBK-EUC-H-Identity-H findfont [10.501 0 0 -10.501 0 0 ]msf
102.444 562.376 mo
(\006\217\003\223)
[10.501 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
123.446 562.376 mo
(:)sh
162.644 580.756 mo
162.644 552.416 li
@
162.844 552.616 mo
208.194 552.616 li
@
%ADOBeginSubsetFont: IRRAAA+CMR5 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2015 Adobe System Incorporated. All rights reserved.
systemdict begin
BKUCWI+CMR5 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/c <1C60D8A8C9B7D8BE613143BEE1E3F91C2EC2443A9ED968997F8D97FDF5F8
3B08D677475506FDF3CA1930849843DB2A67B6C68C908C8EDDCC35AF93277BB3
282C6E0464B420BB0F911EC4764E5EA94958C2476B03CA18A9E64EC6955096DD
3CD990E22DCEA8D1CF828DA1ACC17FF2ACA05D4813FE4DB15674> |-
/d <1C60D8A8C9B6E3FA285908A296AA09118BA415EC3DAE942C134CD8C29838
E188D935AC3A530BF297DBACE92DF74FFAE75604639E22985F4A9AC41AEB54AA
18C63BF7F8C8E58441A9FD262AD78B8C5931042E37DCB88FE384E5F605F50045
CCE3D35965E5980E4341445F1D6006F489CF4AA73997F76BB9B1C16544A7B5C8
E5BE78E9AB7F2D0AB2D6> |-
/e <1C60D8A8C9B7D8BE613143B123956287CF2FB67943D2ABED3CEAD3938BAF
199D42B29691A96D62CE24C8FE2E74DBCA3FF1A9F6417004755A579CDEACCC24
59729B9591FD9E8E9DB4E51B4898328352C556915E50484A213DC0F539FED659
4D56FD7BACD57183ECADD9C5041C35229356FCA3E360627617C8D737> |-
/h <1C60D8A8C9B6E3FA235AD5EA1F1E401F1604720199F49AD671ACC7784C3B
D45CA613229ED1F30D706627EB9C42551A86597B06DAF1DC8E96E2D1C5B1E84D
294AA71AFB5952712379E205C131004628289C7336F1E8346924D557F92222EB
C4CDBE3F2A1AB89CFFBD18A2B76740E0C2BDA2A7E5B71F76F8E96813A9D18504
37A5B92160C628554AE4068A91CF26E001EE94062EF078896A6DB1745BF9E428
626A1DB83C48A4FD2CB0315C783CEAAEC055E72D33B331F5D2474A76FEC0F5FA
36D7EAEA3FD040CB58BE> |-
/o <1C60D8A8C9B65DE7034D06840474C293B98A5020C89A7D98D2208D858B28
75B3C40413EF080614C60FC6161546B95C9E5CA64DC1A3BB9A2C1D91908C50D4
FFF8C8F990EB0C0138FFA3DCC90F455D92C8F5D8D0DFAF1504A852779A7DC588
A07242> |-
/t <1C60D8A8C9B79EE33B25A4C603E0307BE9853473A8119CD78BE2FF24ED03
B9EEB0293C6DB12D30B5FEB175B264399F359FA385D38808E838F7F9FBBD9FAD
8367C077F4065B44A7C4E14A851E2B2837CE46BD20E072A67782> |-
/x <1C60D8A8C9B63EE6894C6A746F2C834F4E7FA33DB85B15F5EF29A4932AD2
F5C90426913AEE22BCB9B016C06604772DD1918489DF0696E9EA4C7966603256
ADB5BE82884A323D296C3C24A6493558A91D58B96A0B09CAFF2ECB9C1ADA2B1F
52B40EF65D78E945A3989F97793355BB543FB13EDC82F819AFA7B14C4B40D7F3
8C1682C3F06F321688972AFC39ECBCFC675786319A3E7B064E6A6381B4FE564E
D977A1654422A2C5BD0E3BAF4F5945BDC59E8C543CA22AD2BF702DCC3754C153
6C321FFA86F758878A2EF1FF39AA14ECC01401001EE5143DF903311E26985621
AA642DC98FF905430EC953C9A1250FD57D9DDE2D5E3A3A39DE122D26FE0A779F
72F6F19B1F68FB3693261366520AD1B249F5CA7455B13C81EB121423190756E6
FEF5A7077AF96944C492088A17B1200A68C2D8E4A715934B2F7219B1012C1F7F
23C224> |-
systemdict /gcheck known {setglobal} if end {end} if
end
BKUCWI+CMR5 /Encoding get
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 104 /h put
dup 111 /o put
dup 116 /t put
dup 120 /x put
pop
%ADOEndSubsetFont
/BKUCWI+CMR5*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 7{/.notdef}rp /A /B /C /D 
/E /F 28{/.notdef}rp /c /d /e 2{/.notdef}rp /h 
6{/.notdef}rp /o 4{/.notdef}rp /t 3{/.notdef}rp /x 135{/.notdef}rp]
BKUCWI+CMR5 nf
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.834 558.266 mo
(dec)
[3.73575 3.04388 0 ]xsh
BKUCWG+CMSS10*1 [11.955 0 0 -11.955 0 0 ]msf
169.614 570.236 mo
(CHAR)
[7.63806 8.4677 7.97043 0 ]xsh
BKUCWI+CMR5*1 [4.981 0 0 -4.981 0 0 ]msf
164.834 577.376 mo
(hexo)
[3.73575 3.04388 22.9323 0 ]xsh
198.105 577.376 mo
(ct)
[3.0439 0 ]xsh
162.844 580.556 mo
208.194 580.556 li
@
208.394 580.756 mo
208.394 552.416 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
] del_res
/BKUCWJ+MnSymbol10*1 uf
/BKUCWJ+MnSymbol10 uf
/RDHAAA+MnSymbol10 uf
/BKUCWK+MnSymbol10*1 uf
/BKUCWK+MnSymbol10 uf
/CBIAAA+MnSymbol10 uf
/BKUCWL+MnSymbol10*1 uf
/BKUCWL+MnSymbol10 uf
/VXVBAA+MnSymbol10 uf
/BKUCWH+FZJSJW--GB1-0-GBK-EUC-H-Identity-H uf
/BKUCWH+FZJSJW--GB1-0-GBK-EUC-H /CIDFont ur
/BKUCWG+CMSS10*1 uf
/BKUCWG+CMSS10 uf
/XSAAAA+CMSS10 uf
/BKUCWE+MarVoSym*1 uf
/BKUCWE+MarVoSym uf
/FXYAAA+MarVoSym uf
/BKUCWC+CMUSerif-Roman-Identity-H-Identity-H uf
/BKUCWC+CMUSerif-Roman-Identity-H /CIDFont ur
/BKUCWF+CMR7*1 uf
/BKUCWF+CMR7 uf
/DTOAAA+CMR7 uf
/BKUCWI+CMR5*1 uf
/BKUCWI+CMR5 uf
/IRRAAA+CMR5 uf
/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H-Identity-H uf
/BKUCWD+FZLTHJW--GB1-0-GBK-EUC-H /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
